<?xml version="1.0" encoding="utf-8"?>
<root>
	<!-- 
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
	
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:element name="root" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="data">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
							<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
							<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="resheader">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" />
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>1.3</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<data name="TerminalSymbol_BadRegex" xml:space="preserve">
    <value>The value '{0}' is not a valid regular expression pattern.</value>
  </data>
	<data name="TerminalSymbol_Comparison_BadRegex" xml:space="preserve">
    <value>The current value of the Value property, '{0}', is not a valid regular expression pattern.</value>
  </data>
	<data name="Grammar_Exception_NoStartSymbol" xml:space="preserve">
    <value>The input string cannot be analyzed because the StartSymbol property is null. Assign a NonTerminalSymbol to the StartSymbol property to define the starting point for syntax analysis.</value>
  </data>
	<data name="MissingTerminalRuleException_Message" xml:space="preserve">
    <value>The syntax rule '{0}' (descendant of NonTerminalSymbol '{1}') does not contain a terminal rule. All branches of a syntax rule tree must end with a leaf node which represents a terminal rule.</value>
  </data>
	<data name="SyntaxValidationError_Description_Expected" xml:space="preserve">
    <value> Expected '{0}'.</value>
  </data>
	<data name="SyntaxValidationError_Description_Missing_Expected_Literal" xml:space="preserve">
    <value> Expected '{0}'.</value>
  </data>
	<data name="SyntaxValidationError_Description_Missing_Expected_Regex" xml:space="preserve">
    <value> Expected a value matching the pattern '{0}'.</value>
  </data>
	<data name="SyntaxValidationError_Description_Invalid" xml:space="preserve">
    <value>Invalid token {0}at line {1}, column {2}.</value>
  </data>
	<data name="SyntaxValidationError_Description_Missing" xml:space="preserve">
    <value>Missing token {0}at line {1}, column {2}.</value>
  </data>
	<data name="SyntaxValidationError_Description_UnrecognizedContent" xml:space="preserve">
    <value>Error at line {0}, column {1}. Unrecognized content.</value>
  </data>
	<data name="Exception_ParseInProgress" xml:space="preserve">
    <value>The {0} property cannot be modified when the Parse method of the associated Grammar is in progress.</value>
  </data>
	<data name="Collection_Exception_ParseInProgress" xml:space="preserve">
    <value>The contents of this collection cannot be modified when the Parse method of the associated Grammar is in progress.</value>
  </data>
	<data name="TerminalSymbol_Exception_CannotModifyWhitespaceSymbol" xml:space="preserve">
    <value>Properties of the TerminalSymbol instance returned from the WhitespaceSymbol property cannot be modified.</value>
  </data>
	<data name="Grammar_WhitespaceSymbol_Description" xml:space="preserve">
    <value>whitespace</value>
  </data>
	<data name="Grammar_NewLineSymbol_Description" xml:space="preserve">
    <value>newline</value>
  </data>
	<data name="Grammar_EndOfStreamSymbol_Description" xml:space="preserve">
    <value>end of stream</value>
  </data>
	<data name="TerminalSymbol_Exception_MatchingSymbol_DifferentGrammar" xml:space="preserve">
    <value>The value assigned to the MatchingSymbol property must belong to the same Grammar as the instance to which it is being assigned.</value>
  </data>
	<data name="TerminalSymbol_Exception_MatchingSymbol_CannotReferenceSelf" xml:space="preserve">
    <value>The value assigned to the MatchingSymbol property must reference a different TerminalSymbol.</value>
  </data>
	<data name="TerminalSymbol_Exception_LanguageElement" xml:space="preserve">
    <value>The LanguageElement property cannot be set to '{0}' because that value is reserved for the {1}.</value>
  </data>
	<data name="TerminalBoundary_Exception_DifferentGrammar" xml:space="preserve">
    <value>The terminal symbol '{0}' is associated with a different Grammar.</value>
  </data>
	<data name="TerminalSymbolsCollection_Exception_DuplicateKey" xml:space="preserve">
    <value>A TerminalSymbol with the name '{0}' already exists in this collection. All TerminalSymbols must have unique names.</value>
  </data>
	<data name="LexerStatesCollection_Exception_DuplicateKey" xml:space="preserve">
    <value>A LexerState with the name '{0}' already exists in this collection. All LexerStates must have unique names.</value>
  </data>
	<data name="NonTerminalSymbolsCollection_Exception_DuplicateKey" xml:space="preserve">
    <value>A NonTerminalSymbol with the name '{0}' already exists in this collection. All NonTerminalSymbols must have unique names.</value>
  </data>
	<data name="EbnfParseError_Description_LineCol" xml:space="preserve">
    <value>Error at line {0}, column {1}. </value>
  </data>
	<data name="EbnfParserNotationDefinition_DuplicatePropertyValue" xml:space="preserve">
    <value>The {0} property cannot be set to the value '{1}' because the {2} property returns the same value.</value>
  </data>
	<data name="EbnfParserNotationDefinition_CannotModify" xml:space="preserve">
    <value>This instance cannot be modified.</value>
  </data>
	<data name="Grammar_Import_UnsupportedFormat" xml:space="preserve">
    <value>The '{0}' format is currently not supported.</value>
  </data>
	<data name="Grammar_Import_InvalidFile" xml:space="preserve">
    <value>The specified file '{0}' does not contain text.</value>
  </data>
	<data name="SyntaxRulesCollection_Exception_CircularReference" xml:space="preserve">
    <value>The rule '{0}' cannot be added to this collection because it would create a circular reference. Circular references are supported, but only for NonTerminalRules.</value>
  </data>
	<data name="Grammar_Exception_StartSymbolIsReferenced" xml:space="preserve">
    <value>The NonTerminalSymbol '{0}' is not a valid StartSymbol because it is referenced by at least one other NonTerminalSymbol. The StartSymbol must not be referenced by any other NonTerminalSymbol.</value>
  </data>
	<data name="InvalidCircularReferenceException_Message" xml:space="preserve">
    <value>A circular reference exists between NonTerminalSymbol '{0}' and NonTerminalSymbol '{1}', but no TerminalSymbol appears between them. Circular references are supported, but NonTerminalSymbols which refer to each other must contain an intervening TerminalSymbol, or infinite recursion will occur when one of the rules are evaluated.</value>
  </data>
	<data name="SyntaxRulesCollection_Exception_RuleEqualsParent" xml:space="preserve">
    <value>The rule '{0}' cannot be added to this collection because it is an ancestor of this collection.</value>
  </data>
	<data name="InvalidDescendantOfConjunctionException_Message" xml:space="preserve">
    <value>A {0} cannot exist in the descendant chain of a ConjunctionRule or NegationRule.</value>
  </data>
	<data name="NegationRuleIsInvalidDescendantException_Message" xml:space="preserve">
    <value>A NegationRule cannot appear as the first sub-rule of rule {0}.</value>
  </data>
	<!--EbnfParseError descriptions (BEGIN)-->
	<data name="EbnfParseError_Description_EmptyGrammarDefinition" xml:space="preserve">
    <value>The grammar definition is empty.</value>
  </data>
	<data name="EbnfParseError_Description_MissingDeclaration" xml:space="preserve">
    <value>The left-hand side of the statement cannot be parsed into a valid identifier.</value>
  </data>
	<data name="EbnfParseError_Description_DuplicateIdentifier" xml:space="preserve">
    <value>The identifier '{0}' is currently in use by another statement.</value>
  </data>
	<data name="EbnfParseError_Description_UnrecognizedContent" xml:space="preserve">
    <value>The statement contains content which is not recognizable.</value>
  </data>
	<data name="EbnfParseError_Description_MissingAssignmentSymbol" xml:space="preserve">
    <value>Expected assignment symbol ({0}).</value>
  </data>
	<data name="EbnfParseError_Description_MissingEndOfStatement" xml:space="preserve">
    <value>Expected end of statement symbol ({0}).</value>
  </data>
	<data name="EbnfParseError_Description_DuplicateAssignmentSymbol" xml:space="preserve">
    <value>Duplicate assignment symbol ({0}).</value>
  </data>
	<data name="EbnfParseError_Description_MissingOperator" xml:space="preserve">
    <value>Missing operator near value '{0}'.</value>
  </data>
	<data name="EbnfParseError_Description_MissingOperand" xml:space="preserve">
    <value>Expected operand.</value>
  </data>
	<data name="EbnfParseError_Description_GroupingSymbolMismatch" xml:space="preserve">
    <value>Grouping symbol mismatch; missing {0}.</value>
  </data>
	<data name="EbnfParseError_Description_InvalidTerminalDeclaration" xml:space="preserve">
    <value>The terminal symbol declaration could not be parsed into a valid statement.</value>
  </data>
	<data name="EbnfParseError_Description_InvalidAssignment" xml:space="preserve">
    <value>The left-hand side of the statement contains content that is not valid for an assignment.</value>
  </data>
	<data name="EbnfParseError_Description_UndeclaredReference" xml:space="preserve">
    <value>The symbol reference '{0}' was never declared.</value>
  </data>
	<data name="EbnfParseError_Description_InvalidDeclaration" xml:space="preserve">
    <value>The value '{0}' is not valid at this location.</value>
  </data>
	<data name="EbnfParseError_Description_InvalidRegularExpression" xml:space="preserve">
    <value>The value '{0}' is not a valid regular expression pattern.</value>
  </data>
	<data name="EbnfParseError_Description_EmptyTerminalSymbolValue" xml:space="preserve">
    <value>A terminal symbol's value was specified as an empty string.</value>
  </data>
	<data name="EbnfParseError_Description_InvalidConjunctionRuleDescendant" xml:space="preserve">
    <value>A Conjunction or Negation rule has one or more invalid descendant rules.</value>
  </data>
	<data name="EbnfParseError_Description_NegationRuleIsFirstDescendant" xml:space="preserve">
    <value>A Negation rule appears as the first sub-rule.</value>
  </data>
	<data name="EbnfParseError_Description_StartSymbolIsReferenced" xml:space="preserve">
    <value>'{0}' cannot be designated as the StartSymbol because it is referenced by another rule.</value>
  </data>
	<data name="EbnfParseError_Description_DuplicateStartSymbol" xml:space="preserve">
    <value>Duplicate StartSymbol; see '{0}'.</value>
  </data>
	<data name="EbnfParseError_Description_InvalidOperator" xml:space="preserve">
    <value>The operator '{0}' is not valid at this location.</value>
  </data>
	<data name="EbnfParseError_Description_IncompleteStatement" xml:space="preserve">
    <value>No expression was found on the right-hand side of the statement.</value>
  </data>
	<data name="EbnfParseError_Description_OpenLiteralString" xml:space="preserve">
    <value>The value '{0}' begins with a quote symbol but does not end with one.</value>
  </data>
	<data name="EbnfParseError_Description_UnbalancedXmlTag" xml:space="preserve">
    <value>The XML tag '{0}' has no matching tag.</value>
  </data>
	<data name="EbnfParseError_Description_UnrecognizedXmlTag" xml:space="preserve">
    <value>The name of the XML tag '{0}' is not recognized by the special sequence in which it appears.</value>
  </data>
	<data name="EbnfParseError_Description_MissingName" xml:space="preserve">
    <value>No value was specified for the 'Name' property.</value>
  </data>
	<data name="EbnfParseError_Description_MissingValue" xml:space="preserve">
    <value>The XML tag is missing a value.</value>
  </data>
	<data name="EbnfParseError_Description_InvalidPropertyValue" xml:space="preserve">
    <value>The value '{0}' could not be parsed into a valid value.</value>
  </data>
	<data name="EbnfParseError_Description_LexerStateAlreadySet" xml:space="preserve">
    <value>The TerminalSymbol '{0}' is already assigned as the starting symbol for LexerState '{1}'.</value>
  </data>
	<data name="EbnfParseError_Description_InvalidXml" xml:space="preserve">
    <value>Invalid XML: {0}</value>
  </data>
	<!--EbnfParseError descriptions (END)-->
	<data name="Lexer_Exception_UnrecognizedContent" xml:space="preserve">
    <value>Unrecognized content at character position {0}; The value '{1}' could not be tokenized.</value>
  </data>
	<data name="LexerState_Exception_TerminalSymbol" xml:space="preserve">
    <value>
      The TerminalSymbol '{0}' cannot be assigned as the first symbol for LexerState '{1}'
      because it already belongs to LexerState '{2}'. The first symbol for a LexerState must
      not be associated with any other LexerStates.
    </value>
  </data>
	<data name="Grammar_Exception_ParseActionConflicts" xml:space="preserve">
    <value>
      The grammar could not be successfully compiled; {0} parse action conflicts were encountered.
    </value>
  </data>
	<data name="LALRParserDebugger_Exception_LanguageGuidMismatch" xml:space="preserve">
    <value>
      The {0} language has a different Guid than the one contained within the specified XML. A debugger cannot be created for a language unless the Guids match.
    </value>
  </data>
	<data name="Whitespace_DisplayText" xml:space="preserve">
    <value>{0} (Whitespace)</value>
  </data>
	<data name="EOS_DisplayText" xml:space="preserve">
    <value>EndOfStream ($)</value>
  </data>
  <data name="Grammar_Exception_CannotModify_Property" xml:space="preserve">
    <value>The value of the '{0}' property cannot be modified because the grammar has been compiled.</value>
  </data>
  <data name="Grammar_Exception_CannotModify" xml:space="preserve">
    <value>Changes cannot be made to the grammar because it has been compiled.</value>
  </data>
  <data name="ClassificationType_Comment_Name" xml:space="preserve">
    <value>Comment</value>
  </data>
	<data name="ClassificationType_Comment_Description" xml:space="preserve">
    <value>A ClassificationType for a comment</value>
  </data>
	<data name="ClassificationType_CompilerError_Name" xml:space="preserve">
    <value>CompilerError</value>
  </data>
	<data name="ClassificationType_CompilerError_Description" xml:space="preserve">
    <value>A ClassificationType for a compiler error</value>
  </data>
	<data name="ClassificationType_DateLiteral_Name" xml:space="preserve">
    <value>DateLiteral</value>
  </data>
	<data name="ClassificationType_DateLiteral_Description" xml:space="preserve">
    <value>A ClassificationType for a date literal</value>
  </data>
	<data name="ClassificationType_DocCommentStart_Name" xml:space="preserve">
    <value>DocCommentStart</value>
  </data>
	<data name="ClassificationType_DocCommentStart_Description" xml:space="preserve">
    <value>A ClassificationType for the element that represents the start of a documentation comment</value>
  </data>
	<data name="ClassificationType_DocCommentTag_Name" xml:space="preserve">
    <value>DocCommentTag</value>
  </data>
	<data name="ClassificationType_DocCommentTag_Description" xml:space="preserve">
    <value>A ClassificationType for an XML tag in a documentation comment</value>
  </data>
	<data name="ClassificationType_DocCommentText_Name" xml:space="preserve">
    <value>DocCommentText</value>
  </data>
	<data name="ClassificationType_DocCommentText_Description" xml:space="preserve">
    <value>A ClassificationType for text inside a documentation comment</value>
  </data>
	<data name="ClassificationType_Identifier_Name" xml:space="preserve">
    <value>Identifier</value>
  </data>
	<data name="ClassificationType_Identifier_Description" xml:space="preserve">
    <value>A ClassificationType for an identifier</value>
  </data>
	<data name="ClassificationType_Keyword_Name" xml:space="preserve">
    <value>Keyword</value>
  </data>
	<data name="ClassificationType_Keyword_Description" xml:space="preserve">
    <value>A ClassificationType for a keyword</value>
  </data>
	<data name="ClassificationType_Number_Name" xml:space="preserve">
    <value>Number</value>
  </data>
	<data name="ClassificationType_Number_Description" xml:space="preserve">
    <value>A ClassificationType for a number</value>
  </data>
	<data name="ClassificationType_NumericLiteral_Name" xml:space="preserve">
    <value>NumericLiteral</value>
  </data>
	<data name="ClassificationType_NumericLiteral_Description" xml:space="preserve">
    <value>A ClassificationType for a numeric literal</value>
  </data>
	<data name="ClassificationType_Operator_Name" xml:space="preserve">
    <value>Operator</value>
  </data>
	<data name="ClassificationType_Operator_Description" xml:space="preserve">
    <value>A ClassificationType for an operator</value>
  </data>
	<data name="ClassificationType_PreprocessorDirective_Name" xml:space="preserve">
    <value>PreprocessorDirective</value>
  </data>
	<data name="ClassificationType_PreprocessorDirective_Description" xml:space="preserve">
    <value>A ClassificationType for a preprocessor directive</value>
  </data>
	<data name="ClassificationType_PreprocessorDirectiveText_Name" xml:space="preserve">
    <value>PreprocessorDirectiveText</value>
  </data>
	<data name="ClassificationType_PreprocessorDirectiveText_Description" xml:space="preserve">
    <value>A ClassificationType for preprocessor directive text</value>
  </data>
	<data name="ClassificationType_Punctuation_Name" xml:space="preserve">
    <value>Punctuation</value>
  </data>
	<data name="ClassificationType_Punctuation_Description" xml:space="preserve">
    <value>A ClassificationType for punctuation</value>
  </data>
	<data name="ClassificationType_StringLiteral_Name" xml:space="preserve">
    <value>StringLiteral</value>
  </data>
	<data name="ClassificationType_StringLiteral_Description" xml:space="preserve">
    <value>A ClassificationType for a string literal</value>
  </data>
	<data name="ClassificationType_SyntaxError_Name" xml:space="preserve">
    <value>SyntaxError</value>
  </data>
	<data name="ClassificationType_SyntaxError_Description" xml:space="preserve">
    <value>A ClassificationType for a syntax error</value>
  </data>
	<data name="ClassificationType_Undefined_Name" xml:space="preserve">
    <value>Undefined</value>
  </data>
	<data name="ClassificationType_Undefined_Description" xml:space="preserve">
    <value>A ClassificationType for an undefined language element</value>
  </data>
	<data name="ClassificationType_UndefinedError_Name" xml:space="preserve">
    <value>UndefinedError</value>
  </data>
	<data name="ClassificationType_UndefinedError_Description" xml:space="preserve">
    <value>A ClassificationType for an undefined error</value>
  </data>
	<data name="ClassificationType_Unrecognized_Name" xml:space="preserve">
    <value>Unrecognized</value>
  </data>
	<data name="ClassificationType_Unrecognized_Description" xml:space="preserve">
    <value>A ClassificationType for an unrecognized language element</value>
  </data>
	<data name="ClassificationType_Warning_Name" xml:space="preserve">
    <value>Warning</value>
  </data>
	<data name="ClassificationType_Warning_Description" xml:space="preserve">
    <value>A ClassificationType for a warning</value>
  </data>
	<data name="ClassificationType_Whitespace_Name" xml:space="preserve">
    <value>Whitespace</value>
  </data>
	<data name="ClassificationType_Whitespace_Description" xml:space="preserve">
    <value>A ClassificationType for whitespace</value>
  </data>
	<data name="EmptyEnumerator" xml:space="preserve">
    <value>Empty enumerator</value>
  </data>
	<data name="EnumeratorPassedEnd" xml:space="preserve">
    <value>Enumerator not initialzied or has passed end of items.</value>
  </data>
	<data name="EnumeratorDisposed" xml:space="preserve">
    <value>Enumerator is already disposed.</value>
  </data>
	<data name="CollectionReadOnly" xml:space="preserve">
    <value>The collection is read only.</value>
  </data>
	<data name="ThreadAccessError" xml:space="preserve">
    <value>The properties and methods of an instance of {0} can only be accessed from the thread it was create on.</value>
  </data>
	<data name="LanguageGenerationParams_Exception_IsLocked_Property" xml:space="preserve">
    <value>The '{0}' property cannot be modified when a language generation operation is in progress.</value>
  </data>
	<data name="LanguageGenerationParams_Exception_IsLocked_Generate" xml:space="preserve">
    <value>The specified LanguageGenerationParams instance is currently in use.</value>
  </data>
	<data name="DocumentIsReadOnly" xml:space="preserve">
    <value>The document is marked read-only.</value>
  </data>
	<data name="DocumentIsBeingUpdated" xml:space="preserve">
    <value>The document is in the process of being changed. It can not be modifed until the change is completed.</value>
  </data>
	<data name="ThreadAccessError" xml:space="preserve">
    <value>The properties and methods of an instance of {0} can only be accessed from the thread it was create on.</value>
  </data>
	<data name="ObjectAlreadyDisposed" xml:space="preserve">
    <value>The object has already been disposed.</value>
  </data>
	<data name="EnumeratorNotinitialized" xml:space="preserve">
    <value>The enumerator has not been initiailized or has reached its end.</value>
  </data>
	<data name="CollectionIsReadOnly" xml:space="preserve">
    <value>The collection can not be modified, it is read-only.</value>
  </data>
	<data name="Undo_InsertText" xml:space="preserve">
    <value>Insert Text</value>
  </data>
	<data name="Undo_InsertTextDetailed" xml:space="preserve">
    <value>Insert '{0}'</value>
  </data>
	<data name="Undo_NewLineLiteral" xml:space="preserve">
    <value>New Line</value>
  </data>
	<data name="Undo_TabLiteral" xml:space="preserve">
    <value>Tab</value>
  </data>
	<data name="Undo_InsertNewLine" xml:space="preserve">
    <value>Insert new line</value>
  </data>
	<data name="Undo_RemoveLine" xml:space="preserve">
    <value>Remove line</value>
  </data>
	<data name="Undo_DeleteText" xml:space="preserve">
    <value>Delete Text</value>
  </data>
	<data name="Undo_DeleteTextDetailed" xml:space="preserve">
    <value>Delete '{0}'</value>
  </data>
	<data name="Undo_ReplaceText" xml:space="preserve">
    <value>Replace Text</value>
  </data>
	<data name="Undo_ReplaceTextDetailed" xml:space="preserve">
    <value>Replace '{0}' with '{1}'</value>
  </data>
	<data name="Undo_ReplaceAll" xml:space="preserve">
    <value>Replace all</value>
  </data>
	<data name="Undo_ReplaceAllDetailed" xml:space="preserve">
    <value>Replace all '{0}' with '{1}'</value>
  </data>
	<data name="Undo_AutoIndent" xml:space="preserve">
    <value>AutoIndent</value>
  </data>
	<data name="Undo_InsertTab" xml:space="preserve">
    <value>Insert Tab</value>
  </data>
	<data name="Undo_RemoveTab" xml:space="preserve">
    <value>Remove Previous Tab</value>
  </data>
	<data name="NotPredecessorOrSuccessorSnapshot" xml:space="preserve">
    <value>Target snapshot is not a predecessor or successor of the source snapshot</value>
  </data>
	<data name="SnapshotsDontMatch" xml:space="preserve">
    <value>The snapshots don't match</value>
  </data>
	<data name="ScannerIsLocked" xml:space="preserve">
    <value>The TextDocumentSnapshotScanner is currently locked. Therefore its CurrentOffset property can not be set either directly or by calling one of the 'Seek' methods.</value>
  </data>
  <data name="InvalidEnumValue" xml:space="preserve">
    <value>Invalid enum value for {0}</value>
  </data>
  <data name="SyntaxError_Expected" xml:space="preserve">
    <value>{0} expected</value>
  </data>
  <data name="SyntaxError_Unexpected" xml:space="preserve">
    <value>Unexpected token '{0}'</value>
  </data>
  <data name="SyntaxError_EndOfStream" xml:space="preserve">
    <value>end of file</value>
  </data>
  <data name="ErrorAlias_Identifier" xml:space="preserve">
    <value>Identifier</value>
  </data>
  <data name="ErrorAlias_Type" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="ErrorAlias_NumericType" xml:space="preserve">
    <value>Numeric type</value>
  </data>
  <data name="ErrorAlias_ClassDeclaration" xml:space="preserve">
    <value>Class declaration</value>
  </data>
  <data name="ErrorAlias_NamespaceDeclaration" xml:space="preserve">
    <value>Namespace declaration</value>
  </data>
  <data name="ErrorAlias_UsingDirective" xml:space="preserve">
    <value>Using</value>
  </data>
  <data name="ErrorAlias_StringLiteral" xml:space="preserve">
    <value>String or character literal</value>
  </data>
  <data name="ErrorAlias_TypeArgumentList" xml:space="preserve">
    <value>Generic argument list</value>
  </data>
  <data name="ErrorAlias_Void" xml:space="preserve">
    <value>void</value>
  </data>
  <data name="ErrorAlias_Expression" xml:space="preserve">
    <value>Expression</value>
  </data>
  <data name="ErrorAlias_Argument" xml:space="preserve">
    <value>Argument</value>
  </data>
  <data name="ErrorAlias_Statement" xml:space="preserve">
    <value>Statement</value>
  </data>
  <data name="ErrorAlias_GetOrSet" xml:space="preserve">
    <value>get or set</value>
  </data>
  <data name="ErrorAlias_RankSpecifier" xml:space="preserve">
    <value>array dimension</value>
  </data>
  <data name="ErrorAlias_Attribute" xml:space="preserve">
    <value>attribute</value>
  </data>
  <data name="ErrorAlias_LockStatement" xml:space="preserve">
    <value>lock</value>
  </data>
  <data name="ErrorAlias_UsingStatement" xml:space="preserve">
    <value>using</value>
  </data>
  <data name="LALRParserDebugger_Exception_LanguageDoesNotSupportParsing" xml:space="preserve">
    <value>The language '{0}' does not support parsing.</value>
  </data>
</root>
