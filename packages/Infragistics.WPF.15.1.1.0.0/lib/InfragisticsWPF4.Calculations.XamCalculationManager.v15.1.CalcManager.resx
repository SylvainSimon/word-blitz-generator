<?xml version="1.0" encoding="utf-8" ?>
<root>
	<!-- 
    Microsoft ResX Schema 
    
    Version 1.3
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">1.3</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1">this is my long string</data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        [base64 mime encoded serialized .NET Framework object]
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        [base64 mime encoded string representing a byte array form of the .NET Framework object]
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used forserialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:element name="root" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="data">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
							<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
							<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="resheader">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" />
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>1.3</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<data name="Func_abs_Desc">
		<value>Returns the absolute value of a number. The absolute value of a number is the number without its sign.</value>
	</data>
	<data name="Func_abs_Category">
		<value>Math</value>
	</data>
	<data name="Func_abs_Arg_0">
		<value>number</value>
	</data>
	<data name="Func_abs_ArgDesc_0">
		<value>The real number of which to get the absolute value.</value>
	</data>
	<data name="Func_acos_Desc">
		<value>Returns the arccosine, or inverse cosine, of a number. The arccosine is the angle whose cosine is specified number. The returned angle is given in radians in the range zero to pi. To convert the result from radians to degrees, multiply by 180/PI().</value>
	</data>
	<data name="Func_acos_Category">
		<value>Math</value>
	</data>
	<data name="Func_acos_Arg_0">
		<value>number</value>
	</data>
	<data name="Func_acos_ArgDesc_0">
		<value>The cosine of the angle to get, which must be from -1 to 1.</value>
	</data>
	<data name="Func_and_Desc">
		<value>Returns true if all values are true or returns false if one or more values are false.</value>
	</data>
	<data name="Func_and_Category">
		<value>Logical</value>
	</data>
	<data name="Func_and_Arg_0">
		<value>logical{0}</value>
	</data>
	<data name="Func_and_ArgDesc_0">
		<value>A logical value (true or false).</value>
	</data>
	<data name="Func_asin_Desc">
		<value>Returns the arcsine, or inverse sine, of a number. The arcsine is the angle whose sine is the specified number. The returned angle is given in radians in the range -pi/2 to pi/2. To express the arcsine in degrees, multiply the result by 180/PI().</value>
	</data>
	<data name="Func_asin_Category">
		<value>Math</value>
	</data>
	<data name="Func_asin_Arg_0">
		<value>number</value>
	</data>
	<data name="Func_asin_ArgDesc_0">
		<value>The sine of the angle to get, which must be from -1 to 1 radians.</value>
	</data>
	<data name="Func_atan_Desc">
		<value>Returns the arctangent, or inverse tangent, of a number. The arctangent is the angle whose tangent is the specified number. The returned angle is given in radians in the range -pi/2 to pi/2. To express the arctangent in degrees, multiply the result by 180/PI().</value>
	</data>
	<data name="Func_atan_Category">
		<value>Math</value>
	</data>
	<data name="Func_atan_Arg_0">
		<value>number</value>
	</data>
	<data name="Func_atan_ArgDesc_0">
		<value>The tangent of the angle to get.</value>
	</data>
	<data name="Func_atan2_Desc">
		<value>Returns the arctangent, or inverse tangent, of the specified x and y-coordinates. The arctangent is the angle from the x-axis to a line containing the origin (0, 0) and a point with coordinates (x_num, y_num). The angle is given in radians between -pi and pi, excluding -pi.</value>
	</data>
	<data name="Func_atan2_Category">
		<value>Math</value>
	</data>
	<data name="Func_atan2_Arg_0">
		<value>x</value>
	</data>
	<data name="Func_atan2_ArgDesc_0">
		<value>The x-coordinate of the point.</value>
	</data>
	<data name="Func_atan2_Arg_1">
		<value>y</value>
	</data>
	<data name="Func_atan2_ArgDesc_1">
		<value>The y-coordinate of the point.</value>
	</data>
	<data name="Func_average_Desc">
		<value>Returns the average (arithmetic mean) of one or more values.</value>
	</data>
	<data name="Func_average_Category">
		<value>Statistical</value>
	</data>
	<data name="Func_average_Arg_0">
		<value>number{0}</value>
	</data>
	<data name="Func_average_ArgDesc_0">
		<value>A number or range of numbers for which to find the average with the other arguments.</value>
	</data>
	<data name="Func_irr_Desc">
		<value>Returns the internal rate of return for a series of cash flows.</value>
	</data>
	<data name="Func_irr_Category">
		<value>Financial</value>
	</data>
	<data name="Func_irr_Arg_0">
		<value>values</value>
	</data>
	<data name="Func_irr_ArgDesc_0">
		<value>A collection of payment (negative values) and income (positive values) values that occur at regular intervals.</value>
	</data>
	<data name="Func_irr_Arg_1">
		<value>guess</value>
	</data>
	<data name="Func_irr_ArgDesc_1">
		<value>A number that you guess is close to the result. The default is 0.1 (10%).</value>
	</data>
	<data name="Func_rate_Desc">
		<value>Returns the interest rate per period of an annuity.</value>
	</data>
	<data name="Func_rate_Category">
		<value>Financial</value>
	</data>
	<data name="Func_rate_Arg_0">
		<value>NPer</value>
	</data>
	<data name="Func_rate_ArgDesc_0">
		<value>The total number of payment periods in an annuity.</value>
	</data>
	<data name="Func_rate_Arg_1">
		<value>Pmt</value>
	</data>
	<data name="Func_rate_ArgDesc_1">
		<value>The payment made each period and cannot change over the life of the annuity.</value>
	</data>
	<data name="Func_rate_Arg_2">
		<value>Pv</value>
	</data>
	<data name="Func_rate_ArgDesc_2">
		<value>The present value, or the total amount that a series of future payments is worth now.</value>
	</data>
	<data name="Func_rate_Arg_3">
		<value>Fv</value>
	</data>
	<data name="Func_rate_ArgDesc_3">
		<value>The future value, or a cash balance you want to attain after the last payment is made. If fv is omitted, it is assumed to be 0 (the future value of a loan, for example, is 0). For example, if you want to save $50,000 to pay for a special project in 18 years, then $50,000 is the future value. You could then make a conservative guess at an interest rate and determine how much you must save each month. If fv is omitted, you must include the pmt argument. The default value for fv is zero.</value>
	</data>
  <data name="Func_rate_Arg_4">
    <value>Type</value>
  </data>
  <data name="Func_rate_ArgDesc_4">
    <value>The number zero or one which indicates whether payments are due at the end of the period (zero, the default value) or the beginning (one).</value>
  </data>
	<data name="Func_rate_Arg_5">
		<value>Guess</value>
	</data>
	<data name="Func_rate_ArgDesc_5">
		<value>A number that you guess is close to the result. If ommitted, it is assumed to be 0.1 (10%).</value>
	</data>
	<data name="Func_ceiling_Desc">
		<value>Returns the smallest multiple of the significance (defaults to 1) greater than or equal to the specified number.</value>
	</data>
	<data name="Func_concatenate_Desc">
		<value>Joins all the arguments into one text expression.</value>
	</data>
	<data name="Func_concatenate_Category">
		<value>TextAndData</value>
	</data>
	<data name="Func_concatenate_ArgDesc_0">
		<value>A text expression or range of text expressions to be joined into a single text expression.</value>
	</data>
	<data name="Func_concatenate_Arg_0">
		<value>text{0}</value>
	</data>
	<data name="Func_cos_Desc">
		<value>Returns the cosine of the given angle.</value>
	</data>
	<data name="Func_cosh_Desc">
		<value>Returns the hyperbolic cosine of a number.</value>
	</data>
	<data name="Func_count_Desc">
		<value>Counts the number of references that contain numbers.</value>
	</data>
	<data name="Func_date_Desc">
		<value>Returns the sequential serial number that represents a particular date.</value>
	</data>
	<data name="Func_datevalue_Desc">
		<value>Returns the date value of the specified date text.</value>
	</data>
	<data name="Func_days360_Desc">
		<value>Returns the number of days between two dates based on a 360-day year.</value>
	</data>
	<data name="Func_db_Desc">
		<value>Returns the depreciation of an asset for a specified period using the fixed-declining balance method.</value>
	</data>
	<data name="Func_ddb_Desc">
		<value>Returns the depreciation of an asset for a specified period using the double-declining balance method or some other method specified.</value>
	</data>
	<data name="Func_even_Desc">
		<value>Rounds a positive number up and a negative number down to nearest even integer.</value>
	</data>
	<data name="Func_exp_Desc">
		<value>Returns e raised to the power of the specified number. The constant e equals 2.71828182845904.</value>
	</data>
	<data name="Func_false_Desc">
		<value>Returns the logical value false.</value>
	</data>
	<data name="Func_find_Desc">
		<value>Returns the the starting position of one text expression within another, case sensitively.</value>
	</data>
  <data name="Func_floor_Desc">
    <value>Returns the largest multiple of the significance (defaults to 1) less than or equal to the given number.</value>
  </data>
	<data name="Func_fv_Desc">
		<value>Returns the future value of an investment based on periodic.</value>
	</data>
	<data name="Func_if_Arg_0">
		<value>logical_test</value>
	</data>
	<data name="Func_if_ArgDesc_0">
		<value>The condition to test.</value>
	</data>
	<data name="Func_if_Arg_1">
		<value>value_if_true</value>
	</data>
	<data name="Func_if_ArgDesc_1">
		<value>The result if the condition evaluates to true.</value>
	</data>
	<data name="Func_if_Arg_2">
		<value>value_if_false</value>
	</data>
	<data name="Func_if_ArgDesc_2">
		<value>The result if the condition evaluates to false. If omitted, it is assumed to be the logical value false.</value>
	</data>
	<data name="Func_if_Desc">
		<value>Returns one value if the specified condition evaluates to true and another value if it evaluates to false.</value>
	</data>
	<data name="Func_int_Desc">
		<value>Rounds a number down to the nearest integer.</value>
	</data>
	<data name="Func_intrate_Desc">
		<value>Returns the interest rate for a fully invested security.</value>
	</data>
	<data name="Func_ipmt_Desc">
		<value>Returns the interest payment for a given period for an investment, based on periodic, constant payments and a constant interest rate.</value>
	</data>
	<data name="Func_left_Desc">
		<value>Returns the first character or characters in a text expression.</value>
	</data>
	<data name="Func_len_Desc">
		<value>Returns the number of characters in a text expression.</value>
	</data>
	<data name="Func_ln_Desc">
		<value>Returns the natural logarithm of a number.</value>
	</data>
	<data name="Func_log_Desc">
		<value>Returns the logarithm of a number to the base specified.</value>
	</data>
	<data name="Func_log10_Desc">
		<value>Returns the base-10 logarithm of a number.</value>
	</data>
	<data name="Func_lower_Desc">
		<value>Converts all uppercase letters in a text expression to lowercase.</value>
	</data>
	<data name="Func_max_Desc">
		<value>Returns the largest number in a set of numbers.</value>
	</data>
	<data name="Func_median_Desc">
		<value>Returns the median of a set of numbers. The median is the middle number when the numbers are sorted or the average of the two middle numbers if there are an even number of specified numbers.</value>
	</data>
	<data name="Func_var_Desc">
		<value>Returns the variance of a population sample.</value>
	</data>
	<data name="Func_stdev_Desc">
		<value>Returns the standard deviation of a population sample.</value>
	</data>
	<data name="Func_mid_Desc">
		<value>Returns a specific number of characters from a text expression.</value>
	</data>
	<data name="Func_min_Desc">
		<value>Returns the smallest number in a set of numbers.</value>
	</data>
	<data name="Func_mod_Desc">
		<value>Returns the remainder after a number is divided by a divisor. The result has the same sign as the divisor.</value>
	</data>
	<data name="Func_not_Desc">
		<value>Reverses a logical value (changes true to false and false to true).</value>
	</data>
	<data name="Func_nper_Desc">
		<value>Returns the number of periods for an investment based on periodic, constant payments and a constant interest rate.</value>
	</data>
	<data name="Func_nper_Category">
		<value>Financial</value>
	</data>
	<data name="Func_nper_Arg_0">
		<value>rate</value>
	</data>
	<data name="Func_nper_Arg_1">
		<value>pmt</value>
	</data>
	<data name="Func_nper_Arg_2">
		<value>pv</value>
	</data>
	<data name="Func_nper_Arg_3">
		<value>fv</value>
	</data>
	<data name="Func_nper_Arg_4">
		<value>type</value>
	</data>
	<data name="Func_nper_ArgDesc_0">
		<value>The interest rate per period.</value>
	</data>
	<data name="Func_nper_ArgDesc_1">
		<value>The payment made each period, which cannot change over the life of the annuity.</value>
	</data>
	<data name="Func_nper_ArgDesc_2">
		<value>The present value, or the lump-sum amount that a series of future payments is worth right now.</value>
	</data>
	<data name="Func_nper_ArgDesc_3">
		<value>The future value, or a cash balance you want to attain after the last payment is made.</value>
	</data>
	<data name="Func_nper_ArgDesc_4">
		<value>The number zero or one which indicates whether payments are due at the end of the period (zero, the default value) or the beginning (one).</value>
	</data>
	<data name="Func_npv_Desc">
		<value>Calculates the net present value of an investment by using a discount rate and a series of future payments (negative values) and income (positive value).</value>
	</data>
	<data name="Func_odd_Desc">
		<value>Rounds a positive number up and a negative number down to the nearest odd integer.</value>
	</data>
	<data name="Func_or_Desc">
		<value>Returns true if one or more values are true; returns false if all values are false.</value>
	</data>
	<data name="Func_pi_Desc">
		<value>Returns the constant pi, which is 3.14159265358979.</value>
	</data>
	<data name="Func_pmt_Desc">
		<value>Calculates the payment for a loan based on constant payments and a constant interest rate.</value>
	</data>
	<data name="Func_power_Desc">
		<value>Returns the result of a number raised to a power.</value>
	</data>
	<data name="Func_ppmt_Desc">
		<value>Returns the payment on the principal for a given period for an investment based on periodic, constant payments and a constant interest rate.</value>
	</data>
	<data name="Func_product_Desc">
		<value>Multiplies all the numbers given as arguments and returns the product.</value>
	</data>
	<data name="Func_pv_Desc">
		<value>Returns the present value of an investment.</value>
	</data>
	<data name="Func_quotient_Desc">
		<value>Returns the integer portion of a division. This will discard the remainder of the division.</value>
	</data>
	<data name="Func_rand_Desc">
		<value>Returns an evenly distributed random number greater than or equal to 0 and less than 1</value>
	</data>
	<data name="Func_replace_Desc">
		<value>Replaces part of a text expression.</value>
	</data>
	<data name="Func_right_Desc">
		<value>Returns the last character or characters in a text expression.</value>
	</data>
	<data name="Func_round_Desc">
		<value>Rounds a number to a specified number of digits.</value>
	</data>
	<data name="Func_sin_Desc">
		<value>Returns the sine of the specified angle.</value>
	</data>
	<data name="Func_sinh_Desc">
		<value>Returns the hyperbolic sine of a number.</value>
	</data>
	<data name="Func_sln_Desc">
		<value>Returns the straight-line depreciation of an asset for one period.</value>
	</data>
	<data name="Func_sqrt_Desc">
		<value>Returns a positive square root of a number.</value>
	</data>
	<data name="Func_sum_Desc">
		<value>Sums all the numbers given as arguments and returns the sum.</value>
	</data>
	<data name="Func_syd_Desc">
		<value>Returns the sum-of-years' digits depreciation of an asset for a specified period.</value>
	</data>
	<data name="Func_trim_Desc">
		<value>Removes all spaces from text except for single spaces between words.</value>
	</data>
	<data name="Func_true_Desc">
		<value>Returns the logical value true.</value>
	</data>
	<data name="Func_trunc_Desc">
		<value>Truncates a number to an integer by removing the fractional part of the number.</value>
	</data>
	<data name="Func_upper_Desc">
		<value>Converts all lowercase letters in a text expression to uppercase.</value>
	</data>
	<data name="Func_value_Desc">
		<value>Converts a text expression that represents a number to a number.</value>
	</data>
	<data name="Func_day_Desc">
		<value>Returns the day of month of a date value.</value>
	</data>
	<data name="Func_month_Desc">
		<value>Returns the month of a date value.</value>
	</data>
	<data name="Func_year_Desc">
		<value>Returns the year of a date value.</value>
	</data>
	<data name="Func_hour_Desc">
		<value>Returns the hour of a time value.</value>
	</data>
	<data name="Func_minute_Desc">
		<value>Returns the minute of a time value.</value>
	</data>
	<data name="Func_second_Desc">
		<value>Returns the second of a time value.</value>
	</data>
	<data name="Func_time_Desc">
		<value>Returns a number that represents a particular time value.</value>
	</data>
	<data name="Func_now_Desc">
		<value>Returns a value representing the current date and time.</value>
	</data>
	<data name="Func_timevalue_Desc">
		<value>Converts a text expression representing a time to its equivalent time value.</value>
	</data>
	<data name="Func_na_Desc">
		<value>Returns the #N/A (value not available) error value.</value>
	</data>
	<data name="Func_type_Desc">
		<value>Returns a number representing the type of value: number = 1; text = 2; logical value (true or false) = 4; error value = 16; array = 64.</value>
	</data>
	<data name="Func_errortype_Desc">
		<value>Returns a number corresponding to an error value.</value>
	</data>
	<data name="Func_isblank_Desc">
		<value>Returns true if the value is blank.</value>
	</data>
	<data name="Func_iserr_Desc">
		<value>Returns true if the value is any error value except #N/A.</value>
	</data>
	<data name="Func_iserror_Desc">
		<value>Returns true if the value is any error value.</value>
	</data>
	<data name="Func_islogical_Desc">
		<value>Returns true if the value is a logical value (true or false).</value>
	</data>
	<data name="Func_isna_Desc">
		<value>Returns true if the value is the #N/A (value not available) error value.</value>
	</data>
	<data name="Func_isnontext_Desc">
		<value>Returns true if the value is any item that is not text.</value>
	</data>
	<data name="Func_isnumber_Desc">
		<value>Returns true if the value is a number.</value>
	</data>
	<data name="Func_isref_Desc">
		<value>Returns true if the value is a reference.</value>
	</data>
	<data name="Func_isref_Category">
		<value>Information</value>
	</data>
	<data name="Func_isref_Arg_0">
		<value>value</value>
	</data>
	<data name="Func_isref_ArgDesc_0">
		<value>The value to test.</value>
	</data>
	<data name="Func_istext_Desc">
		<value>Returns true if the value is a text value.</value>
	</data>
	<data name="Func_isodd_Desc">
		<value>Returns true if the value is an odd number, else returns false.</value>
	</data>
	<data name="Func_iseven_Desc">
		<value>Returns true if the value is an even number, else returns false.</value>
	</data>
	<data name="Func_sum_Category">
		<value>Math</value>
	</data>
	<data name="Func_if_Category">
		<value>Logical</value>
	</data>
	<data name="Func_mod_Category">
		<value>Math</value>
	</data>
	<data name="Func_quotient_Category">
		<value>Math</value>
	</data>
	<data name="Func_product_Category">
		<value>Math</value>
	</data>
	<data name="Func_power_Category">
		<value>Math</value>
	</data>
	<data name="Func_int_Category">
		<value>Math</value>
	</data>
	<data name="Func_count_Category">
		<value>Statistical</value>
	</data>
	<data name="Func_true_Category">
		<value>Logical</value>
	</data>
	<data name="Func_false_Category">
		<value>Logical</value>
	</data>
	<data name="Func_or_Category">
		<value>Logical</value>
	</data>
	<data name="Func_not_Category">
		<value>Logical</value>
	</data>
	<data name="Func_max_Category">
		<value>Statistical</value>
	</data>
	<data name="Func_min_Category">
		<value>Statistical</value>
	</data>
	<data name="Func_var_Category">
		<value>Statistical</value>
	</data>
	<data name="Func_median_Category">
		<value>Statistical</value>
	</data>
	<data name="Func_stdev_Category">
		<value>Statistical</value>
	</data>
	<data name="Func_round_Category">
		<value>Math</value>
	</data>
	<data name="Func_exp_Category">
		<value>Math</value>
	</data>
	<data name="Func_pi_Category">
		<value>Math</value>
	</data>
	<data name="Func_sqrt_Category">
		<value>Math</value>
	</data>
	<data name="Func_cos_Category">
		<value>Math</value>
	</data>
	<data name="Func_cosh_Category">
		<value>Math</value>
	</data>
	<data name="Func_sin_Category">
		<value>Math</value>
	</data>
	<data name="Func_sinh_Category">
		<value>Math</value>
	</data>
	<data name="Func_floor_Category">
		<value>Math</value>
	</data>
	<data name="Func_ceiling_Category">
		<value>Math</value>
	</data>
	<data name="Func_rand_Category">
		<value>Math</value>
	</data>
	<data name="Func_ln_Category">
		<value>Math</value>
	</data>
	<data name="Func_log_Category">
		<value>Math</value>
	</data>
	<data name="Func_log10_Category">
		<value>Math</value>
	</data>
	<data name="Func_npv_Category">
		<value>Financial</value>
	</data>
	<data name="Func_pv_Category">
		<value>Financial</value>
	</data>
	<data name="Func_fv_Category">
		<value>Financial</value>
	</data>
	<data name="Func_pmt_Category">
		<value>Financial</value>
	</data>
	<data name="Func_trunc_Category">
		<value>Math</value>
	</data>
	<data name="Func_even_Category">
		<value>Math</value>
	</data>
	<data name="Func_odd_Category">
		<value>Math</value>
	</data>
	<data name="Func_ipmt_Category">
		<value>Financial</value>
	</data>
	<data name="Func_ppmt_Category">
		<value>Financial</value>
	</data>
	<data name="Func_lower_Category">
		<value>TextAndData</value>
	</data>
	<data name="Func_upper_Category">
		<value>TextAndData</value>
	</data>
	<data name="Func_left_Category">
		<value>TextAndData</value>
	</data>
	<data name="Func_right_Category">
		<value>TextAndData</value>
	</data>
	<data name="Func_mid_Category">
		<value>TextAndData</value>
	</data>
	<data name="Func_len_Category">
		<value>TextAndData</value>
	</data>
	<data name="Func_trim_Category">
		<value>TextAndData</value>
	</data>
	<data name="Func_value_Category">
		<value>TextAndData</value>
	</data>
	<data name="Func_find_Category">
		<value>TextAndData</value>
	</data>
	<data name="Func_replace_Category">
		<value>TextAndData</value>
	</data>
	<data name="Func_syd_Category">
		<value>Financial</value>
	</data>
	<data name="Func_sln_Category">
		<value>Financial</value>
	</data>
	<data name="Func_db_Category">
		<value>Financial</value>
	</data>
	<data name="Func_ddb_Category">
		<value>Financial</value>
	</data>
	<data name="Func_intrate_Category">
		<value>Financial</value>
	</data>
	<data name="Func_date_Category">
		<value>DateAndTime</value>
	</data>
	<data name="Func_datevalue_Category">
		<value>DateAndTime</value>
	</data>
	<data name="Func_day_Category">
		<value>DateAndTime</value>
	</data>
	<data name="Func_month_Category">
		<value>DateAndTime</value>
	</data>
	<data name="Func_year_Category">
		<value>DateAndTime</value>
	</data>
	<data name="Func_hour_Category">
		<value>DateAndTime</value>
	</data>
	<data name="Func_minute_Category">
		<value>DateAndTime</value>
	</data>
	<data name="Func_second_Category">
		<value>DateAndTime</value>
	</data>
	<data name="Func_days360_Category">
		<value>DateAndTime</value>
	</data>
	<data name="Func_time_Category">
		<value>DateAndTime</value>
	</data>
	<data name="Func_timevalue_Category">
		<value>DateAndTime</value>
	</data>
	<data name="Func_now_Category">
		<value>DateAndTime</value>
	</data>
	<data name="Func_na_Category">
		<value>Information</value>
	</data>
	<data name="Func_type_Category">
		<value>Information</value>
	</data>
	<data name="Func_errortype_Category">
		<value>Information</value>
	</data>
	<data name="Func_iserr_Category">
		<value>Information</value>
	</data>
	<data name="Func_iserror_Category">
		<value>Information</value>
	</data>
	<data name="Func_isblank_Category">
		<value>Information</value>
	</data>
	<data name="Func_islogical_Category">
		<value>Information</value>
	</data>
	<data name="Func_isna_Category">
		<value>Information</value>
	</data>
	<data name="Func_isnontext_Category">
		<value>Information</value>
	</data>
	<data name="Func_isnumber_Category">
		<value>Information</value>
	</data>
	<data name="Func_istext_Category">
		<value>Information</value>
	</data>
	<data name="Func_isodd_Category">
		<value>Information</value>
	</data>
	<data name="Func_iseven_Category">
		<value>Information</value>
	</data>
	<data name="Func_sum_ArgDesc_0">
		<value>A number to add to the other numbers.</value>
	</data>
	<data name="Func_sum_Arg_0">
		<value>number{0}</value>
	</data>
	<data name="Func_mod_Arg_0">
		<value>number</value>
	</data>
	<data name="Func_mod_Arg_1">
		<value>divisor</value>
	</data>
	<data name="Func_mod_ArgDesc_0">
		<value>The number for which to find the remainder.</value>
	</data>
	<data name="Func_mod_ArgDesc_1">
		<value>The value by which to divide the number.</value>
	</data>
	<data name="Func_quotient_Arg_0">
		<value>numerator</value>
	</data>
	<data name="Func_quotient_Arg_1">
		<value>denominator</value>
	</data>
	<data name="Func_quotient_ArgDesc_0">
		<value>The dividend of the division operation.</value>
	</data>
	<data name="Func_quotient_ArgDesc_1">
		<value>The divisor of the division operation.</value>
	</data>
	<data name="Func_product_Arg_0">
		<value>number{0}</value>
	</data>
	<data name="Func_product_ArgDesc_0">
		<value>A number to multiply to the other numbers.</value>
	</data>
	<data name="Func_power_Arg_0">
		<value>number</value>
	</data>
	<data name="Func_power_Arg_1">
		<value>power</value>
	</data>
	<data name="Func_power_ArgDesc_0">
		<value>The base number to raise to a power.</value>
	</data>
	<data name="Func_power_ArgDesc_1">
		<value>The exponent to which the base number is raised.</value>
	</data>
	<data name="Func_int_Arg_0">
		<value>number</value>
	</data>
	<data name="Func_int_ArgDesc_0">
		<value>The real number to round down to an integer.</value>
	</data>
	<data name="Func_trunc_Arg_0">
		<value>number</value>
	</data>
	<data name="Func_trunc_Arg_1">
		<value>num_digits</value>
	</data>
	<data name="Func_trunc_ArgDesc_0">
		<value>The number to truncate.</value>
	</data>
	<data name="Func_trunc_ArgDesc_1">
		<value>A number specifying the precision of the truncation. The default value is zero.</value>
	</data>
	<data name="Func_count_Arg_0">
		<value>value{0}</value>
	</data>
	<data name="Func_count_ArgDesc_0">
		<value>A reference or range of references that may contain numbers.</value>
	</data>
	<data name="Func_not_Arg_0">
		<value>logical</value>
	</data>
	<data name="Func_not_ArgDesc_0">
		<value>A logical value (true or false).</value>
	</data>
	<data name="Func_or_Arg_0">
		<value>logical{0}</value>
	</data>
	<data name="Func_or_ArgDesc_0">
		<value>A logical value (true or false).</value>
	</data>
	<data name="Func_min_Arg_0">
		<value>number{0}</value>
	</data>
	<data name="Func_min_ArgDesc_0">
		<value>A number or range of numbers.</value>
	</data>
	<data name="Func_max_Arg_0">
		<value>number{0}</value>
	</data>
	<data name="Func_max_ArgDesc_0">
		<value>A number or range of numbers.</value>
	</data>
	<data name="Func_exp_Arg_0">
		<value>number</value>
	</data>
	<data name="Func_exp_ArgDesc_0">
		<value>The exponent applied to which to raise e.</value>
	</data>
	<data name="Func_round_Arg_0">
		<value>number</value>
	</data>
	<data name="Func_round_Arg_1">
		<value>num_digits</value>
	</data>
	<data name="Func_round_Arg_2">
		<value>round_Style</value>
	</data>
	<data name="Func_round_ArgDesc_0">
		<value>The number to round.</value>
	</data>
	<data name="Func_round_ArgDesc_1">
		<value>The number of digits to which to round number.</value>
	</data>
	<data name="Func_round_ArgDesc_2">
		<value>A number indicating the style of rounding to use.
0 - Arithmetic Rounding (default) - If the last significant digit in the rounding is a 5, the number is rounded up.
1 - Banker's Rounding - When the last significant digit is a 5, the preceding digit is used to determine whether to round up or down. If the digit is even, the number is rounded down. If it is odd, then the number is rounded up.
    </value>
	</data>
	<data name="Func_sqrt_ArgDesc_0">
		<value>The number for which to get the square root.</value>
	</data>
	<data name="Func_sqrt_Arg_0">
		<value>number</value>
	</data>
	<data name="Func_cos_Arg_0">
		<value>number</value>
	</data>
	<data name="Func_cos_ArgDesc_0">
		<value>The angle in radians for which to get the cosine.</value>
	</data>
	<data name="Func_cosh_Arg_0">
		<value>number</value>
	</data>
	<data name="Func_cosh_ArgDesc_0">
		<value>A real number for which to find the hyperbolic cosine.</value>
	</data>
	<data name="Func_sin_Arg_0">
		<value>number</value>
	</data>
	<data name="Func_sin_ArgDesc_0">
		<value>The angle in radians for which to get the sine.</value>
	</data>
	<data name="Func_sinh_Arg_0">
		<value>number</value>
	</data>
	<data name="Func_sinh_ArgDesc_0">
		<value>A real number of which to get the hyperbolic sine.</value>
	</data>
	<data name="Func_floor_Arg_0">
		<value>number</value>
	</data>
  <data name="Func_floor_Arg_1">
    <value>significance</value>
  </data>
	<data name="Func_floor_ArgDesc_0">
		<value>The number to round.</value>
	</data>
  <data name="Func_floor_ArgDesc_1">
    <value>The multiple to which to round. If omitted, this is assumed to be one.</value>
  </data>
  <data name="Func_ceiling_Arg_0">
		<value>number</value>
	</data>
  <data name="Func_ceiling_Arg_1">
    <value>significance</value>
  </data>
	<data name="Func_ceiling_ArgDesc_0">
		<value>The number to round.</value>
	</data>
  <data name="Func_ceiling_ArgDesc_1">
    <value>The multiple to which to round. If omitted, this is assumed to be one.</value>
  </data>
	<data name="Func_ln_Arg_0">
		<value>number</value>
	</data>
	<data name="Func_ln_ArgDesc_0">
		<value>The positive real number for which to get the natural logarithm.</value>
	</data>
	<data name="Func_log10_Arg_0">
		<value>number</value>
	</data>
	<data name="Func_log10_ArgDesc_0">
		<value>The positive real number for which to get the base-10 logarithm.</value>
	</data>
	<data name="Func_log_Arg_0">
		<value>number</value>
	</data>
	<data name="Func_log_Arg_1">
		<value>base</value>
	</data>
	<data name="Func_log_ArgDesc_0">
		<value>The positive real number for which to get the logarithm.</value>
	</data>
	<data name="Func_log_ArgDesc_1">
		<value>The base of the logarithm.</value>
	</data>
	<data name="Func_npv_Arg_0">
		<value>rate</value>
	</data>
	<data name="Func_npv_Arg_1">
		<value>value{0}</value>
	</data>
	<data name="Func_npv_ArgDesc_0">
		<value>The rate of discount over the length of one period.</value>
	</data>
	<data name="Func_npv_ArgDesc_1">
		<value>A payment (negative value) or income (positive value).</value>
	</data>
	<data name="Func_fv_Arg_0">
		<value>rate</value>
	</data>
	<data name="Func_fv_Arg_1">
		<value>nper</value>
	</data>
	<data name="Func_fv_Arg_2">
		<value>pmt</value>
	</data>
	<data name="Func_fv_Arg_3">
		<value>pv</value>
	</data>
	<data name="Func_fv_Arg_4">
		<value>type</value>
	</data>
	<data name="Func_fv_ArgDesc_0">
		<value>The interest rate per period.</value>
	</data>
	<data name="Func_fv_ArgDesc_1">
		<value>The total number of payment periods in an annuity.</value>
	</data>
	<data name="Func_fv_ArgDesc_2">
		<value>The payment made each period, which cannot change over the life of the annuity.</value>
	</data>
	<data name="Func_fv_ArgDesc_3">
		<value>The present value, or the lump-sum amount that a series of future payments is worth right now. If ommitted, it is assumed to be zero.</value>
	</data>
	<data name="Func_fv_ArgDesc_4">
		<value>The number zero or one which indicates whether payments are due at the end of the period (zero, the default value) or the beginning (one).</value>
	</data>
	<data name="Func_pv_ArgDesc_0">
		<value>The interest rate per period.</value>
	</data>
	<data name="Func_pv_ArgDesc_1">
		<value>The total number of payment periods in an annuity.</value>
	</data>
	<data name="Func_pv_ArgDesc_2">
		<value>The payment made each period, which cannot change over the life of the annuity.</value>
	</data>
	<data name="Func_pv_ArgDesc_3">
		<value>The future value, or a cash balance you want to attain after the last payment is made.</value>
	</data>
  <data name="Func_pv_ArgDesc_4">
    <value>The number zero or one which indicates whether payments are due at the end of the period (zero, the default value) or the beginning (one).</value>
  </data>
	<data name="Func_pv_Arg_0">
		<value>rate</value>
	</data>
	<data name="Func_pv_Arg_1">
		<value>nper</value>
	</data>
	<data name="Func_pv_Arg_2">
		<value>pmt</value>
	</data>
	<!-- JAS 2/16/05 BR02403 - The argument's name is fv, not pv.
    <data name="Func_pv_Arg_3">    
        <value>pv</value>    
    </data>
    -->
	<data name="Func_pv_Arg_3">
		<value>fv</value>
	</data>
	<data name="Func_pv_Arg_4">
		<value>type</value>
	</data>
	<data name="Func_pmt_Arg_0">
		<value>rate</value>
	</data>
	<data name="Func_pmt_Arg_1">
		<value>nper</value>
	</data>
	<data name="Func_pmt_Arg_2">
		<value>pv</value>
	</data>
	<data name="Func_pmt_Arg_3">
		<value>fv</value>
	</data>
	<data name="Func_pmt_ArgDesc_0">
		<value>The interest rate for the loan.</value>
	</data>
	<data name="Func_pmt_ArgDesc_1">
		<value>The total number of payments for the loan.</value>
	</data>
	<data name="Func_pmt_ArgDesc_2">
		<value>The present value, or the total amount that a series of future payments is worth now; also known as the principal.</value>
	</data>
	<data name="Func_pmt_ArgDesc_3">
		<value>The future value, or a cash balance you want to attain after the last payment is made.</value>
	</data>
	<data name="Func_pmt_ArgDesc_4">
		<value>The number zero or one which indicates whether payments are due at the end of the period (zero, the default value) or the beginning (one).</value>
	</data>
	<data name="Func_pmt_Arg_4">
		<value>type</value>
	</data>
	<data name="Func_even_Arg_0">
		<value>number</value>
	</data>
	<data name="Func_even_ArgDesc_0">
		<value>The value to round.</value>
	</data>
	<data name="Func_odd_Arg_0">
		<value>number</value>
	</data>
	<data name="Func_odd_ArgDesc_0">
		<value>The value to round.</value>
	</data>
	<data name="Func_ppmt_Arg_0">
		<value>rate</value>
	</data>
	<data name="Func_ppmt_Arg_1">
		<value>per</value>
	</data>
	<data name="Func_ppmt_Arg_2">
		<value>nper</value>
	</data>
	<data name="Func_ppmt_Arg_3">
		<value>pv</value>
	</data>
	<data name="Func_ppmt_Arg_4">
		<value>fv</value>
	</data>
	<data name="Func_ppmt_Arg_5">
		<value>type</value>
	</data>
	<data name="Func_ppmt_ArgDesc_0">
		<value>The interest rate per period.</value>
	</data>
	<data name="Func_ppmt_ArgDesc_1">
		<value>The period, which must be in the range of one to nper.</value>
	</data>
	<data name="Func_ppmt_ArgDesc_2">
		<value>The total number of payment periods in an annuity.</value>
	</data>
	<data name="Func_ppmt_ArgDesc_3">
		<value>The present value, or the total amount that a series of future payments is worth now.</value>
	</data>
	<data name="Func_ppmt_ArgDesc_4">
		<value>The future value, or a cash balance you want to attain after the last payment is made.</value>
	</data>
	<data name="Func_ppmt_ArgDesc_5">
		<value>The number zero or one which indicates whether payments are due at the end of the period (zero, the default value) or the beginning (one).</value>
	</data>
	<data name="Func_ipmt_Arg_0">
		<value>rate</value>
	</data>
	<data name="Func_ipmt_Arg_1">
		<value>per</value>
	</data>
	<data name="Func_ipmt_Arg_2">
		<value>nper</value>
	</data>
	<data name="Func_ipmt_Arg_3">
		<value>pv</value>
	</data>
	<data name="Func_ipmt_Arg_4">
		<value>fv</value>
	</data>
	<data name="Func_ipmt_Arg_5">
		<value>type</value>
	</data>
	<data name="Func_ipmt_ArgDesc_0">
		<value>The interest rate per period.</value>
	</data>
	<data name="Func_ipmt_ArgDesc_1">
		<value>The period, which must be in the range of one to nper.</value>
	</data>
	<data name="Func_ipmt_ArgDesc_2">
		<value>The total number of payment periods in an annuity.</value>
	</data>
	<data name="Func_ipmt_ArgDesc_3">
		<value>The present value, or the lump-sum amount that a series of future payments is worth now.</value>
	</data>
	<data name="Func_ipmt_ArgDesc_4">
		<value>The future value, or a cash balance you want to attain after the last payment is made. If ommitted, it is assumed to be zero.</value>
	</data>
	<data name="Func_ipmt_ArgDesc_5">
		<value>The number zero or one which indicates whether payments are due at the end of the period (zero, the default value) or the beginning (one).</value>
	</data>
	<data name="Func_lower_Arg_0">
		<value>text</value>
	</data>
	<data name="Func_lower_ArgDesc_0">
		<value>The text to convert to lowercase.</value>
	</data>
	<data name="Func_upper_Arg_0">
		<value>text</value>
	</data>
	<data name="Func_upper_ArgDesc_0">
		<value>The text to convert to uppercase.</value>
	</data>
	<data name="Func_left_Arg_0">
		<value>text</value>
	</data>
	<data name="Func_left_Arg_1">
		<value>num_chars</value>
	</data>
	<data name="Func_left_ArgDesc_0">
		<value>The text expression containing the characters to extract.</value>
	</data>
	<data name="Func_left_ArgDesc_1">
		<value>The number of characters to extract.</value>
	</data>
	<data name="Func_right_Arg_0">
		<value>text</value>
	</data>
	<data name="Func_right_Arg_1">
		<value>num_chars</value>
	</data>
	<data name="Func_right_ArgDesc_0">
		<value>The text expression containing the characters to extract.</value>
	</data>
	<data name="Func_right_ArgDesc_1">
		<value>The number of characters to extract.</value>
	</data>
	<data name="Func_mid_Arg_0">
		<value>text</value>
	</data>
	<data name="Func_mid_Arg_1">
		<value>start_num</value>
	</data>
	<data name="Func_mid_Arg_2">
		<value>num_chars</value>
	</data>
	<data name="Func_mid_ArgDesc_0">
		<value>The text expression containing the characters to extract.</value>
	</data>
  <data name="Func_mid_ArgDesc_1">
    <value>The 1-based index of the first character to extract.</value>
  </data>
	<data name="Func_mid_ArgDesc_2">
		<value>The number of characters to extract.</value>
	</data>
	<data name="Func_trim_Arg_0">
		<value>text</value>
	</data>
	<data name="Func_trim_ArgDesc_0">
		<value>The text from which to remove extra spaces.</value>
	</data>
	<data name="Func_len_Arg_0">
		<value>text</value>
	</data>
	<data name="Func_len_ArgDesc_0">
		<value>The text expression whose length to find. Spaces count as characters.</value>
	</data>
	<data name="Func_value_Arg_0">
		<value>text</value>
	</data>
	<data name="Func_value_ArgDesc_0">
		<value>The text expression to convert.</value>
	</data>
	<data name="Func_find_Arg_0">
		<value>find_text</value>
	</data>
	<data name="Func_find_Arg_1">
		<value>within_text</value>
	</data>
	<data name="Func_find_Arg_2">
		<value>start_num</value>
	</data>
	<data name="Func_find_ArgDesc_0">
		<value>The text to find.</value>
	</data>
	<data name="Func_find_ArgDesc_1">
		<value>The text containing the text to find.</value>
	</data>
	<data name="Func_find_ArgDesc_2">
		<value>The 1-based index character at which to start the search. If omitted, it is assumed to be one.</value>
	</data>
	<data name="Func_replace_ArgDesc_0">
		<value>The text expression in which to replace some characters.</value>
	</data>
	<data name="Func_replace_ArgDesc_1">
		<value>The 1-based index of the character in old_text to replace with new_text.</value>
	</data>
	<data name="Func_replace_ArgDesc_2">
		<value>The number of characters in old_text to replace with new_text.</value>
	</data>
	<data name="Func_replace_ArgDesc_3">
		<value>The text that will replace the characters in old_text.</value>
	</data>
	<data name="Func_syd_Arg_0">
		<value>cost</value>
	</data>
	<data name="Func_syd_Arg_1">
		<value>salvage</value>
	</data>
	<data name="Func_syd_Arg_2">
		<value>life</value>
	</data>
	<data name="Func_syd_Arg_3">
		<value>per</value>
	</data>
	<data name="Func_syd_ArgDesc_0">
		<value>The initial cost of the asset.</value>
	</data>
	<data name="Func_syd_ArgDesc_1">
		<value>The value at the end of the depreciation.</value>
	</data>
	<data name="Func_syd_ArgDesc_2">
		<value>The number of periods over which the asset is depreciated.</value>
	</data>
	<data name="Func_syd_ArgDesc_3">
		<value>The period, which must use the same units as life.</value>
	</data>
	<data name="Func_sln_Arg_0">
		<value>cost</value>
	</data>
	<data name="Func_sln_Arg_1">
		<value>salvage</value>
	</data>
	<data name="Func_sln_Arg_2">
		<value>life</value>
	</data>
	<data name="Func_sln_ArgDesc_0">
		<value>The initial cost of the asset.</value>
	</data>
	<data name="Func_sln_ArgDesc_1">
		<value>The value at the end of the depreciation.</value>
	</data>
	<data name="Func_sln_ArgDesc_2">
		<value>The number of periods over which the asset is depreciated.</value>
	</data>
	<data name="Func_db_Arg_0">
		<value>cost</value>
	</data>
	<data name="Func_db_Arg_1">
		<value>salvage</value>
	</data>
	<data name="Func_db_Arg_2">
		<value>life</value>
	</data>
	<data name="Func_db_Arg_3">
		<value>period</value>
	</data>
	<data name="Func_db_Arg_4">
		<value>month</value>
	</data>
	<data name="Func_db_ArgDesc_0">
		<value>The initial cost of the asset.</value>
	</data>
	<data name="Func_db_ArgDesc_1">
		<value>The value at the end of the depreciation (sometimes called the salvage value of the asset).</value>
	</data>
	<data name="Func_db_ArgDesc_2">
		<value>The number of periods over which the asset is being depreciated (sometimes called the useful life of the asset).</value>
	</data>
	<data name="Func_db_ArgDesc_3">
		<value>The period for which to calculate the depreciation. Period must use the same units as life.</value>
	</data>
	<data name="Func_db_ArgDesc_4">
		<value>The number of months in the first year. If month is omitted, it is assumed to be 12.</value>
	</data>
	<data name="Func_ddb_Arg_0">
		<value>cost</value>
	</data>
	<data name="Func_ddb_Arg_1">
		<value>salvage</value>
	</data>
	<data name="Func_ddb_Arg_2">
		<value>life</value>
	</data>
	<data name="Func_ddb_Arg_3">
		<value>period</value>
	</data>
	<data name="Func_ddb_Arg_4">
		<value>factor</value>
	</data>
	<data name="Func_ddb_ArgDesc_0">
		<value>The initial cost of the asset.</value>
	</data>
	<data name="Func_ddb_ArgDesc_1">
		<value>The value at the end of the depreciation (sometimes called the salvage value of the asset).</value>
	</data>
	<data name="Func_ddb_ArgDesc_2">
		<value>The number of periods over which the asset is being depreciated (sometimes called the useful life of the asset).</value>
	</data>
	<data name="Func_ddb_ArgDesc_3">
		<value>The period for which to calculate the depreciation. Period must use the same units as life.</value>
	</data>
	<data name="Func_ddb_ArgDesc_4">
		<value>The rate at which the balance declines. If factor is omitted, it is assumed to be 2 (the double-declining balance method).</value>
	</data>
	<data name="Func_intrate_Arg_0">
		<value>settlement</value>
	</data>
	<data name="Func_intrate_Arg_1">
		<value>maturity</value>
	</data>
	<data name="Func_intrate_Arg_2">
		<value>investment</value>
	</data>
	<data name="Func_intrate_Arg_3">
		<value>redemption</value>
	</data>
	<data name="Func_intrate_Arg_4">
		<value>basis</value>
	</data>
	<data name="Func_intrate_ArgDesc_0">
		<value>The security's settlement date.</value>
	</data>
	<data name="Func_intrate_ArgDesc_1">
		<value>The security's maturity date.</value>
	</data>
	<data name="Func_intrate_ArgDesc_2">
		<value>The amount invested in the security.</value>
	</data>
	<data name="Func_intrate_ArgDesc_3">
		<value>The amount to be received at maturity.</value>
	</data>
	<data name="Func_intrate_ArgDesc_4">
		<value>The type of day count basis to use.
0 or omitted = US (NASD) 30/360, 
1 = Actual/actual, 
2 = Actual/360, 
3 = Actual/365, 
4 = European 30/360
    </value>
	</data>
	<data name="Func_datevalue_Arg_0">
		<value>date_text</value>
	</data>
	<data name="Func_datevalue_ArgDesc_0">
		<value>A text expression representing a date.</value>
	</data>
	<data name="Func_date_Arg_0">
		<value>year</value>
	</data>
	<data name="Func_date_Arg_1">
		<value>month</value>
	</data>
	<data name="Func_date_Arg_2">
		<value>day</value>
	</data>
	<data name="Func_date_ArgDesc_0">
		<value>A number representing the year.</value>
	</data>
	<data name="Func_date_ArgDesc_1">
		<value>A number representing the month of the year.</value>
	</data>
	<data name="Func_date_ArgDesc_2">
		<value>A number representing the day of the month.</value>
	</data>
	<data name="Func_days360_Arg_0">
		<value>start_date</value>
	</data>
	<data name="Func_days360_Arg_1">
		<value>end_date</value>
	</data>
	<data name="Func_days360_Arg_2">
		<value>method</value>
	</data>
	<data name="Func_days360_ArgDesc_0">
		<value>The start date of the range of days. If this is after the end date, the function will return a negative number.</value>
	</data>
	<data name="Func_days360_ArgDesc_1">
		<value>The end date of the range of days. If this is before the start date, the function will return a negative number.</value>
	</data>
	<data name="Func_days360_ArgDesc_2">
		<value>A logical value that specifies whether to use the U.S. (false) or European (true) method in the calculation.</value>
	</data>
	<data name="Func_timevalue_Arg_0">
		<value>time_text</value>
	</data>
	<data name="Func_timevalue_ArgDesc_0">
		<value>A text expression representing a time.</value>
	</data>
	<data name="Func_time_Arg_0">
		<value>hour</value>
	</data>
	<data name="Func_time_Arg_1">
		<value>minute</value>
	</data>
	<data name="Func_time_Arg_2">
		<value>second</value>
	</data>
	<data name="Func_time_ArgDesc_0">
		<value>A number representing the time's hour.</value>
	</data>
	<data name="Func_time_ArgDesc_1">
		<value>A number representing the time's minute.</value>
	</data>
	<data name="Func_time_ArgDesc_2">
		<value>A number representing the time's second.</value>
	</data>
	<data name="Func_median_Arg_0">
		<value>number{0}</value>
	</data>
	<data name="Func_median_ArgDesc_0">
		<value>A number or range of numbers.</value>
	</data>
	<data name="Func_var_Arg_0">
		<value>number{0}</value>
	</data>
	<data name="Func_var_ArgDesc_0">
		<value>A number or range of numbers specifying a sample of a population.</value>
	</data>
	<data name="Func_stdev_Arg_0">
		<value>number{0}</value>
	</data>
	<data name="Func_stdev_ArgDesc_0">
		<value>A number or range of numbers specifying a sample of a population.</value>
	</data>
	<data name="Func_type_Arg_0">
		<value>value</value>
	</data>
	<data name="Func_type_ArgDesc_0">
		<value>The value of which to get the type.</value>
	</data>
	<data name="Func_errortype_Arg_0">
		<value>error_value</value>
	</data>
	<data name="Func_errortype_ArgDesc_0">
		<value>The error value whose identifying number should be found.</value>
	</data>
	<data name="Func_isblank_Arg_0">
		<value>value</value>
	</data>
	<data name="Func_isblank_ArgDesc_0">
		<value>The value to test.</value>
	</data>
	<data name="Func_iserr_Arg_0">
		<value>value</value>
	</data>
	<data name="Func_iserr_ArgDesc_0">
		<value>The value to test.</value>
	</data>
	<data name="Func_iserror_Arg_0">
		<value>value</value>
	</data>
	<data name="Func_iserror_ArgDesc_0">
		<value>The value to test.</value>
	</data>
	<data name="Func_islogical_Arg_0">
		<value>value</value>
	</data>
	<data name="Func_islogical_ArgDesc_0">
		<value>The value to test.</value>
	</data>
	<data name="Func_isna_Arg_0">
		<value>value</value>
	</data>
	<data name="Func_isna_ArgDesc_0">
		<value>The value to test.</value>
	</data>
	<data name="Func_isnontext_Arg_0">
		<value>value</value>
	</data>
	<data name="Func_isnontext_ArgDesc_0">
		<value>The value to test.</value>
	</data>
	<data name="Func_isnumber_Arg_0">
		<value>value</value>
	</data>
	<data name="Func_isnumber_ArgDesc_0">
		<value>The value to test.</value>
	</data>
	<data name="Func_istext_Arg_0">
		<value>value</value>
	</data>
	<data name="Func_istext_ArgDesc_0">
		<value>The value to test.</value>
	</data>
	<data name="Func_iseven_Arg_0">
		<value>value</value>
	</data>
	<data name="Func_iseven_ArgDesc_0">
		<value>The value to test.</value>
	</data>
	<data name="Func_isodd_Arg_0">
		<value>value</value>
	</data>
	<data name="Func_isodd_ArgDesc_0">
		<value>The value to test.</value>
	</data>
	<data name="Func_replace_Arg_0">
		<value>Old_text</value>
	</data>
	<data name="Func_replace_Arg_1">
		<value>Start_num</value>
	</data>
	<data name="Func_replace_Arg_2">
		<value>Num_chars</value>
	</data>
	<data name="Func_replace_Arg_3">
		<value>New_text</value>
	</data>
	<data name="Func_day_Arg_0">
		<value>Date_value</value>
	</data>
	<data name="Func_day_ArgDesc_0">
		<value>A date value from which to get the day.</value>
	</data>
	<data name="Func_month_Arg_0">
		<value>Date_value</value>
	</data>
	<data name="Func_year_Arg_0">
		<value>Date_value</value>
	</data>
	<data name="Func_hour_Arg_0">
		<value>Time_value</value>
	</data>
	<data name="Func_minute_Arg_0">
		<value>Time_value</value>
	</data>
	<data name="Func_second_Arg_0">
		<value>Time_value</value>
	</data>
	<data name="Func_month_ArgDesc_0">
		<value>A date value from which to get the month.</value>
	</data>
	<data name="Func_year_ArgDesc_0">
		<value>A date value from which to get the year.</value>
	</data>
	<data name="Func_hour_ArgDesc_0">
		<value>A time value from which to get the hour.</value>
	</data>
	<data name="Func_minute_ArgDesc_0">
		<value>A time value from which to get the minute.</value>
	</data>
	<data name="Func_second_ArgDesc_0">
		<value>A time value from which to get the second.</value>
	</data>
	<data name="Func_isnull_Desc">
		<value>Returns true if the value is non-existent.</value>
	</data>
	<data name="Func_isnull_Category">
		<value>Information</value>
	</data>
	<data name="Func_isnull_Arg_0">
		<value>value</value>
	</data>
	<data name="Func_isnull_ArgDesc_0">
		<value>The value to test.</value>
	</data>
	<data name="Func_isdbnull_Desc">
		<value>Returns true if the value represents a non-existent value.</value>
	</data>
	<data name="Func_isdbnull_Category">
		<value>Information</value>
	</data>
	<data name="Func_isdbnull_Arg_0">
		<value>value</value>
	</data>
	<data name="Func_isdbnull_ArgDesc_0">
		<value>The value to test.</value>
	</data>
	<data name="Func_null_Desc">
		<value>Returns a non-existent value.</value>
	</data>
	<data name="Func_null_Category">
		<value>Information</value>
	</data>
	<data name="Func_dbnull_Desc">
		<value>Returns something that represents a non-existent value.</value>
	</data>
	<data name="Func_dbnull_Category">
		<value>Information</value>
	</data>
	<!-- AS 9/7/04 Removed _datetime_ resources and added new ones for the dateadd and datediff functions -->
	<data name="Func_dateadd_Desc">
		<value>Returns a date to which the specified interval has been added.</value>
	</data>
	<data name="Func_dateadd_Category">
		<value>DateAndTime</value>
	</data>
	<data name="Func_dateadd_Arg_0">
		<value>interval</value>
	</data>
	<data name="Func_dateadd_ArgDesc_0">
		<value>A text expression representing the time interval to add.
d = Day
y = Day
h = Hour
n = Minute
m = Month
q = Quarter
s = Second
w = Week
ww = Calendar week
yyyy = Year
</value>
	</data>
	<data name="Func_dateadd_Arg_1">
		<value>number</value>
	</data>
	<data name="Func_dateadd_ArgDesc_1">
		<value>The number of intervals to add. This value can be positive (to get a DateTime in the future) or negative (to get a DateTime in the past). It can contain a fractional part when Interval specifies hours, minutes, or seconds. For other values of Interval, any fractional part of Number is ignored.</value>
	</data>
	<data name="Func_dateadd_Arg_2">
		<value>date</value>
	</data>
	<data name="Func_dateadd_ArgDesc_2">
		<value>The date to which the interval is to be added.</value>
	</data>
	<data name="Func_datediff_Desc">
		<value>Returns a value indicating the number of intervals between two DateTime values.</value>
	</data>
	<data name="Func_datediff_Category">
		<value>DateAndTime</value>
	</data>
	<data name="Func_datediff_Arg_0">
		<value>interval</value>
	</data>
	<data name="Func_datediff_ArgDesc_0">
		<value>A text expression representing the time interval to use as the unit of difference between date1 and date2.
d = Day
y = Day
h = Hour
n = Minute
m = Month
q = Quarter
s = Second
w = Week
ww = Calendar week
yyyy = Year
</value>
	</data>
	<data name="Func_datediff_Arg_1">
		<value>date1</value>
	</data>
	<data name="Func_datediff_ArgDesc_1">
		<value>The first date to use in the difference calculation.</value>
	</data>
	<data name="Func_datediff_Arg_2">
		<value>date2</value>
	</data>
	<data name="Func_datediff_ArgDesc_2">
		<value>The second date to use in the difference calculation.</value>
	</data>
	<data name="Error_Internal">
		<value>An internal error occurred in method {0}.</value>
	</data>
	<data name="Error_ParseRef">
		<value>Unknown reference at {0}.</value>
	</data>
	<data name="Error_UnresolvedExternal">
		<value>Unresolved external reference</value>
	</data>
	<data name="Error_InvalidFunction">
		<value>Invalid function '{0}' at {1}.</value>
	</data>
	<data name="Error_InvalidFunctionArgCountTooMany">
		<value>The function '{0}' referenced at {1} does not contain the correct number of arguments. The argument count should not exceed {2} parameter(s).</value>
	</data>
	<data name="Error_InvalidFunctionArgCountTooFew">
		<value>The function '{0}' referenced at {1} does not contain the correct number of arguments. The function requires a minimum of {2} parameter(s).</value>
	</data>
	<data name="Error_NullFunctionResult">
		<value>The evaluation of '{0}' returned a null value.</value>
	</data>
	<data name="Error_InvalidOperatorArgCount">
		<value>The '{0}' function must accept {1} arguments.</value>
	</data>
  <data name="Error_Location">
    <value>line {0} col {1}</value>
  </data>
	<data name="Func_tan_Desc">
		<value>Returns the tangent of the specified angle.</value>
	</data>
	<data name="Func_tan_Arg_0">
		<value>number</value>
	</data>
	<data name="Func_tan_ArgDesc_0">
		<value>The angle, in radians, for which to get the tangent.</value>
	</data>
	<data name="Func_tan_Category">
		<value>Math</value>
	</data>
	<data name="Func_tanh_Desc">
		<value>Returns the hyperbolic tangent of the specified angle.</value>
	</data>
	<data name="Func_tanh_Arg_0">
		<value>number</value>
	</data>
	<data name="Func_tanh_ArgDesc_0">
		<value>The angle, in radians, for which to get the hyperbolic tangent.</value>
	</data>
	<data name="Func_tanh_Category">
		<value>Math</value>
	</data>
	<data name="Func_abs_CategoryURL">
		<value>Math</value>
	</data>
	<data name="Func_acos_CategoryURL">
		<value>Math</value>
	</data>
	<data name="Func_and_CategoryURL">
		<value>Logical</value>
	</data>
	<data name="Func_asin_CategoryURL">
		<value>Math</value>
	</data>
	<data name="Func_atan_CategoryURL">
		<value>Math</value>
	</data>
	<data name="Func_atan2_CategoryURL">
		<value>Math</value>
	</data>
	<data name="Func_average_CategoryURL">
		<value>Statistical</value>
	</data>
	<data name="Func_irr_CategoryURL">
		<value>Financial</value>
	</data>
	<data name="Func_rate_CategoryURL">
		<value>Financial</value>
	</data>
	<data name="Func_concatenate_CategoryURL">
		<value>Text_and_Data</value>
	</data>
	<data name="Func_nper_CategoryURL">
		<value>Financial</value>
	</data>
	<data name="Func_isref_CategoryURL">
		<value>Information</value>
	</data>
	<data name="Func_sum_CategoryURL">
		<value>Math</value>
	</data>
	<data name="Func_if_CategoryURL">
		<value>Logical</value>
	</data>
	<data name="Func_mod_CategoryURL">
		<value>Math</value>
	</data>
	<data name="Func_quotient_CategoryURL">
		<value>Math</value>
	</data>
	<data name="Func_product_CategoryURL">
		<value>Math</value>
	</data>
	<data name="Func_power_CategoryURL">
		<value>Math</value>
	</data>
	<data name="Func_int_CategoryURL">
		<value>Math</value>
	</data>
	<data name="Func_count_CategoryURL">
		<value>Statistical</value>
	</data>
	<data name="Func_true_CategoryURL">
		<value>Logical</value>
	</data>
	<data name="Func_false_CategoryURL">
		<value>Logical</value>
	</data>
	<data name="Func_or_CategoryURL">
		<value>Logical</value>
	</data>
	<data name="Func_not_CategoryURL">
		<value>Logical</value>
	</data>
	<data name="Func_max_CategoryURL">
		<value>Statistical</value>
	</data>
	<data name="Func_min_CategoryURL">
		<value>Statistical</value>
	</data>
	<data name="Func_var_CategoryURL">
		<value>Statistical</value>
	</data>
	<data name="Func_median_CategoryURL">
		<value>Statistical</value>
	</data>
	<data name="Func_stdev_CategoryURL">
		<value>Statistical</value>
	</data>
	<data name="Func_round_CategoryURL">
		<value>Math</value>
	</data>
	<data name="Func_exp_CategoryURL">
		<value>Math</value>
	</data>
	<data name="Func_pi_CategoryURL">
		<value>Math</value>
	</data>
	<data name="Func_sqrt_CategoryURL">
		<value>Math</value>
	</data>
	<data name="Func_cos_CategoryURL">
		<value>Math</value>
	</data>
	<data name="Func_cosh_CategoryURL">
		<value>Math</value>
	</data>
	<data name="Func_sin_CategoryURL">
		<value>Math</value>
	</data>
	<data name="Func_sinh_CategoryURL">
		<value>Math</value>
	</data>
	<data name="Func_floor_CategoryURL">
		<value>Math</value>
	</data>
	<data name="Func_ceiling_CategoryURL">
		<value>Math</value>
	</data>
	<data name="Func_rand_CategoryURL">
		<value>Math</value>
	</data>
	<data name="Func_ln_CategoryURL">
		<value>Math</value>
	</data>
	<data name="Func_log_CategoryURL">
		<value>Math</value>
	</data>
	<data name="Func_log10_CategoryURL">
		<value>Math</value>
	</data>
	<data name="Func_npv_CategoryURL">
		<value>Financial</value>
	</data>
	<data name="Func_pv_CategoryURL">
		<value>Financial</value>
	</data>
	<data name="Func_fv_CategoryURL">
		<value>Financial</value>
	</data>
	<data name="Func_pmt_CategoryURL">
		<value>Financial</value>
	</data>
	<data name="Func_trunc_CategoryURL">
		<value>Math</value>
	</data>
	<data name="Func_even_CategoryURL">
		<value>Math</value>
	</data>
	<data name="Func_odd_CategoryURL">
		<value>Math</value>
	</data>
	<data name="Func_ipmt_CategoryURL">
		<value>Financial</value>
	</data>
	<data name="Func_ppmt_CategoryURL">
		<value>Financial</value>
	</data>
	<data name="Func_lower_CategoryURL">
		<value>Text_and_Data</value>
	</data>
	<data name="Func_upper_CategoryURL">
		<value>Text_and_Data</value>
	</data>
	<data name="Func_left_CategoryURL">
		<value>Text_and_Data</value>
	</data>
	<data name="Func_right_CategoryURL">
		<value>Text_and_Data</value>
	</data>
	<data name="Func_mid_CategoryURL">
		<value>Text_and_Data</value>
	</data>
	<data name="Func_len_CategoryURL">
		<value>Text_and_Data</value>
	</data>
	<data name="Func_trim_CategoryURL">
		<value>Text_and_Data</value>
	</data>
	<data name="Func_value_CategoryURL">
		<value>Text_and_Data</value>
	</data>
	<data name="Func_find_CategoryURL">
		<value>Text_and_Data</value>
	</data>
	<data name="Func_replace_CategoryURL">
		<value>Text_and_Data</value>
	</data>
	<data name="Func_syd_CategoryURL">
		<value>Financial</value>
	</data>
	<data name="Func_sln_CategoryURL">
		<value>Financial</value>
	</data>
	<data name="Func_db_CategoryURL">
		<value>Financial</value>
	</data>
	<data name="Func_ddb_CategoryURL">
		<value>Financial</value>
	</data>
	<data name="Func_intrate_CategoryURL">
		<value>Financial</value>
	</data>
	<data name="Func_date_CategoryURL">
		<value>Date_and_Time</value>
	</data>
	<data name="Func_datevalue_CategoryURL">
		<value>Date_and_Time</value>
	</data>
	<data name="Func_day_CategoryURL">
		<value>Date_and_Time</value>
	</data>
	<data name="Func_month_CategoryURL">
		<value>Date_and_Time</value>
	</data>
	<data name="Func_year_CategoryURL">
		<value>Date_and_Time</value>
	</data>
	<data name="Func_hour_CategoryURL">
		<value>Date_and_Time</value>
	</data>
	<data name="Func_minute_CategoryURL">
		<value>Date_and_Time</value>
	</data>
	<data name="Func_second_CategoryURL">
		<value>Date_and_Time</value>
	</data>
	<data name="Func_days360_CategoryURL">
		<value>Date_and_Time</value>
	</data>
	<data name="Func_time_CategoryURL">
		<value>Date_and_Time</value>
	</data>
	<data name="Func_timevalue_CategoryURL">
		<value>Date_and_Time</value>
	</data>
	<data name="Func_now_CategoryURL">
		<value>Date_and_Time</value>
	</data>
	<data name="Func_na_CategoryURL">
		<value>Information</value>
	</data>
	<data name="Func_type_CategoryURL">
		<value>Information</value>
	</data>
	<data name="Func_errortype_CategoryURL">
		<value>Information</value>
	</data>
	<data name="Func_iserr_CategoryURL">
		<value>Information</value>
	</data>
	<data name="Func_iserror_CategoryURL">
		<value>Information</value>
	</data>
	<data name="Func_isblank_CategoryURL">
		<value>Information</value>
	</data>
	<data name="Func_islogical_CategoryURL">
		<value>Information</value>
	</data>
	<data name="Func_isna_CategoryURL">
		<value>Information</value>
	</data>
	<data name="Func_isnontext_CategoryURL">
		<value>Information</value>
	</data>
	<data name="Func_isnumber_CategoryURL">
		<value>Information</value>
	</data>
	<data name="Func_istext_CategoryURL">
		<value>Information</value>
	</data>
	<data name="Func_isodd_CategoryURL">
		<value>Information</value>
	</data>
	<data name="Func_iseven_CategoryURL">
		<value>Information</value>
	</data>
	<data name="Func_isnull_CategoryURL">
		<value>Information</value>
	</data>
	<data name="Func_isdbnull_CategoryURL">
		<value>Information</value>
	</data>
	<data name="Func_null_CategoryURL">
		<value>Information</value>
	</data>
	<data name="Func_dbnull_CategoryURL">
		<value>Information</value>
	</data>
	<data name="Func_dateadd_CategoryURL">
		<value>Date_and_Time</value>
	</data>
	<data name="Func_datediff_CategoryURL">
		<value>Date_and_Time</value>
	</data>
	<data name="Func_tan_CategoryURL">
		<value>Math</value>
	</data>
	<data name="Func_tanh_CategoryURL">
		<value>Math</value>
	</data>
	<data name="Func_CategoryURL_Template">
		<value>ms-help://INFRAGISTICS_HELP/NetAdvantagev{2}{3}/Win/WinElements/WinCalcManager_{0}_Functions.html#FUNC_{1}</value>		
	</data>
	<!-- // JAS 12/22/04 BR01396 (START) -->
	<!-- CHAR -->
	<data name="Func_char_Desc">
		<value>Returns the character specified by the code number from the character set for your computer.</value>
	</data>
	<data name="Func_char_Category">
		<value>TextAndData</value>
	</data>
	<data name="Func_char_CategoryURL">
		<value>Text_and_Data</value>
	</data>
	<data name="Func_char_Arg_0">
		<value>charCode</value>
	</data>
	<data name="Func_char_ArgDesc_0">
		<value>The number to be converted to a character.</value>
	</data>
	<!-- CODE -->
	<data name="Func_code_Desc">
		<value>Returns a numeric code for the first character in a text expression using the character set used by your computer.</value>
	</data>
	<data name="Func_code_Category">
		<value>TextAndData</value>
	</data>
	<data name="Func_code_CategoryURL">
		<value>Text_and_Data</value>
	</data>
	<data name="Func_code_Arg_0">
		<value>text</value>
	</data>
	<data name="Func_code_ArgDesc_0">
		<value>The text expression which will have its first character evaluated.</value>
	</data>
	<!-- FIXED -->
	<data name="Func_fixed_Desc">
		<value>Rounds a number to the specified number of decimals and returns the result as text with or without commas.</value>
	</data>
	<data name="Func_fixed_Category">
		<value>TextAndData</value>
	</data>
	<data name="Func_fixed_CategoryURL">
		<value>Text_and_Data</value>
	</data>
	<data name="Func_fixed_Arg_0">
		<value>number</value>
	</data>
	<data name="Func_fixed_ArgDesc_0">
		<value>The number to round and convert to text.</value>
	</data>
	<data name="Func_fixed_Arg_1">
		<value>decimals</value>
	</data>
	<data name="Func_fixed_ArgDesc_1">
		<value>The number of digits to the right of the decimal point in the return value. If this value is negative, 'number' is rounded to the left of the decimal point. The default value is 2.</value>
	</data>
	<data name="Func_fixed_Arg_2">
		<value>no_commas</value>
	</data>
	<data name="Func_fixed_ArgDesc_2">
		<value>True if commas should not be in the return value. If omitted, it is assumed to be false.</value>
	</data>
	<!-- TODAY -->
	<data name="Func_today_Desc">
		<value>Returns the current date.</value>
	</data>
	<data name="Func_today_Category">
		<value>DateAndTime</value>
	</data>
	<data name="Func_today_CategoryURL">
		<value>Date_and_Time</value>
	</data>
	<!-- ASINH -->
	<data name="Func_asinh_Desc">
		<value>Returns the inverse hyperbolic sine of the given number. The inverse hyperbolic sine is the angle whose hyperbolic sine is specified number.</value>
	</data>
	<data name="Func_asinh_Category">
		<value>Math</value>
	</data>
	<data name="Func_asinh_CategoryURL">
		<value>Math</value>
	</data>
	<data name="Func_asinh_Arg_0">
		<value>number</value>
	</data>
	<data name="Func_asinh_ArgDesc_0">
		<value>A real number for which to find the inverse hyperbolic sine.</value>
	</data>
	<!-- ACOSH -->
	<data name="Func_acosh_Desc">
		<value>Returns the inverse hyperbolic cosine of the given number. The inverse hyperbolic cosine is the angle whose hyperbolic cosine is specified number.</value>
	</data>
	<data name="Func_acosh_Category">
		<value>Math</value>
	</data>
	<data name="Func_acosh_CategoryURL">
		<value>Math</value>
	</data>
	<data name="Func_acosh_Arg_0">
		<value>number</value>
	</data>
	<data name="Func_acosh_ArgDesc_0">
		<value>A real number greater than 1 for which to find the inverse hyperbolic cosine.</value>
	</data>
	<!-- ATANH -->
	<data name="Func_atanh_Desc">
		<value>Returns the inverse hyperbolic tangent of the given number. The inverse hyperbolic tangent is the angle whose hyperbolic tangent is specified number.</value>
	</data>
	<data name="Func_atanh_Category">
		<value>Math</value>
	</data>
	<data name="Func_atanh_CategoryURL">
		<value>Math</value>
	</data>
	<data name="Func_atanh_Arg_0">
		<value>number</value>
	</data>
	<data name="Func_atanh_ArgDesc_0">
		<value>A real number between -1 and 1 for which to get the inverse hyperbolic tangent.</value>
	</data>
	<!-- // JAS 12/22/04 BR01396 (END) -->
	<!-- // AS 5/12/05 Token Localization (START) -->
	<data name="TokenPattern_LeftParen">
		<value>LEFT_PAREN</value>
	</data>
	<data name="TokenPattern_RightParen">
		<value>RIGHT_PAREN</value>
	</data>
	<data name="TokenPattern_Number">
		<value>NUMBER</value>
	</data>
	<data name="TokenPattern_Text">
		<value>TEXT</value>
	</data>
	<data name="TokenPattern_WhiteSpace">
		<value>WHITESPACE</value>
	</data>
	<data name="TokenPattern_OperatorDot">
		<value>OP_DOT</value>
	</data>
	<data name="TokenPattern_OperatorEqual">
		<value>OP_EQUAL</value>
	</data>
	<data name="TokenPattern_OperatorGreaterThan">
		<value>OP_GT</value>
	</data>
	<data name="TokenPattern_OperatorLessThan">
		<value>OP_LT</value>
	</data>
	<data name="TokenPattern_OperatorGreaterThanEqual">
		<value>OP_GE</value>
	</data>
	<data name="TokenPattern_OperatorLessThanEqual">
		<value>OP_LE</value>
	</data>
	<data name="TokenPattern_OperatorNotEqual">
		<value>OP_NE</value>
	</data>
	<data name="TokenPattern_OperatorNotEqualAlternate">
		<value>OP_ALT_NE</value>
	</data>
	<data name="TokenPattern_OperatorConcatenate">
		<value>OP_CONCAT</value>
	</data>
	<data name="TokenPattern_OperatorPlus">
		<value>OP_PLUS</value>
	</data>
	<data name="TokenPattern_OperatorMinus">
		<value>OP_MINUS</value>
	</data>
	<data name="TokenPattern_OperatorMultiply">
		<value>OP_TIMES</value>
	</data>
	<data name="TokenPattern_OperatorDivide">
		<value>OP_DIV</value>
	</data>
	<data name="TokenPattern_OperatorExponent">
		<value>OP_EXPON</value>
	</data>
	<data name="TokenPattern_OperatorPercent">
		<value>OP_PERCENT</value>
	</data>
	<data name="TokenPattern_ArgumentSeparator">
		<value>ARG_SEP</value>
	</data>
	<data name="TokenPattern_RangeSeparator">
		<value>RANGE_SEP</value>
	</data>
	<data name="TokenPattern_Reference">
		<value>REFERENCE</value>
	</data>
	<data name="TokenPattern_QuotedString">
		<value>QUOTED_STRING</value>
	</data>
	<!-- // AS 5/12/05 Token Localization (END) -->

  <!-- // MRS NAS 8.3 (START) -->
  <data name="Func_edate_Desc">
    <value>Returns a date that is the specified number of months before or after the start date.</value>
  </data>
  <data name="Func_edate_Category">
    <value>DateAndTime</value>
  </data>
  <data name="Func_edate_Arg_0">
    <value>date</value>
  </data>
  <data name="Func_edate_Arg_1">
    <value>numberOfMonths</value>
  </data>
  <data name="Func_edate_ArgDesc_0">
    <value>The starting date.</value>
  </data>
  <data name="Func_edate_ArgDesc_1">
    <value>The number of months to shift the date. A positive number means a date after the start date. A negative number indicates a date prior to the start date.</value>
  </data>
  <data name="Func_edate_CategoryURL">
    <value>DateAndTime</value>
  </data>
  <data name="Func_eomonth_Desc">
    <value>Returns a date that is at the end of the month which is the specified number of months before or after the start date.</value>
  </data>
  <data name="Func_eomonth_Category">
    <value>DateAndTime</value>
  </data>
  <data name="Func_eomonth_Arg_0">
    <value>date</value>
  </data>
  <data name="Func_eomonth_Arg_1">
    <value>numberOfMonths</value>
  </data>
  <data name="Func_eomonth_ArgDesc_0">
    <value>The starting date.</value>
  </data>
  <data name="Func_eomonth_ArgDesc_1">
    <value>The number of months to shift the date. A positive number means a date after the start date. A negative number indicates a date prior to the start date.</value>
  </data>
  <data name="Func_eomonth_CategoryURL">
    <value>DateAndTime</value>
  </data>
  <data name="Func_networkdays_Desc">
    <value>Returns the total number of whole work days between the specified dates, excluding any specified holidays.</value>
  </data>
  <data name="Func_networkdays_Category">
    <value>DateAndTime</value>
  </data>
  <data name="Func_networkdays_Arg_0">
    <value>startDate</value>
  </data>
  <data name="Func_networkdays_Arg_1">
    <value>endDate</value>
  </data>
  <data name="Func_networkdays_Arg_2">
    <value>holidays</value>
  </data>
  <data name="Func_networkdays_ArgDesc_0">
    <value>The date from which to start.</value>
  </data>
  <data name="Func_networkdays_ArgDesc_1">
    <value>The date at which to end.</value>
  </data>
  <data name="Func_networkdays_ArgDesc_2">
    <value>A range of one or more references containing dates that are to be considered non-working days.</value>
  </data>
  <data name="Func_networkdays_CategoryURL">
    <value>DateAndTime</value>
  </data>
  <data name="Func_weeknum_Desc">
    <value>Returns the number of the week into which the specified date falls.</value>
  </data>
  <data name="Func_weeknum_Category">
    <value>DateAndTime</value>
  </data>
  <data name="Func_weeknum_Arg_0">
    <value>date</value>
  </data>
  <data name="Func_weeknum_Arg_1">
    <value>returnType</value>
  </data>
  <data name="Func_weeknum_ArgDesc_0">
    <value>The date of which to find the week number.</value>
  </data>
  <data name="Func_weeknum_ArgDesc_1">
    <value>Determines which day begins the week.
1 (default) = Sunday is the first day of the week.
2 = Monday is the first day of the week.
    </value>
  </data>
  <data name="Func_weeknum_CategoryURL">
    <value>DateAndTime</value>
  </data>
  <data name="Func_workday_Desc">
    <value>Returns a work day the specified number of days from the specified date, excluding any specified holidays.</value>
  </data>
  <data name="Func_workday_Category">
    <value>DateAndTime</value>
  </data>
  <data name="Func_workday_Arg_0">
    <value>startDate</value>
  </data>
  <data name="Func_workday_Arg_1">
    <value>days</value>
  </data>
  <data name="Func_workday_Arg_2">
    <value>holidays</value>
  </data>
  <data name="Func_workday_ArgDesc_0">
    <value>The date from which to start.</value>
  </data>
  <data name="Func_workday_ArgDesc_1">
    <value>The number of work days to offset from the start date.</value>
  </data>
  <data name="Func_workday_ArgDesc_2">
    <value>A range of one or more references containing dates that are to be considered non-working days.</value>
  </data>
  <data name="Func_workday_CategoryURL">
    <value>DateAndTime</value>
  </data>
  <data name="Func_yearfrac_Desc">
    <value>Returns a fraction representing the part of a year specified between the specified start date and end date.</value>
  </data>
  <data name="Func_yearfrac_Category">
    <value>DateAndTime</value>
  </data>
  <data name="Func_yearfrac_Arg_0">
    <value>StartDate</value>
  </data>
  <data name="Func_yearfrac_Arg_1">
    <value>EndDate</value>
  </data>
  <data name="Func_yearfrac_Arg_2">
    <value>Basis</value>
  </data>
  <data name="Func_yearfrac_ArgDesc_0">
    <value>Start date is the starting date in the range.</value>
  </data>
  <data name="Func_yearfrac_ArgDesc_1">
    <value>End date is the ending date in the range.</value>
  </data>
  <data name="Func_yearfrac_ArgDesc_2">
    <value>
      Basis determines the basis for the day count to use.
      0 (Default = US (NASD) 30/360
      1 = Actual/actual
      2 = Actual/360
      3 = Actual/365
      4 = European 30/360
    </value>
  </data>
  <data name="Func_yearfrac_CategoryURL">
    <value>DateAndTime</value>
  </data>
  <data name="Func_weekday_Desc">
    <value>Returns a number representing the day of the week of the specified date.</value>
  </data>
  <data name="Func_weekday_Category">
    <value>DateAndTime</value>
  </data>
  <data name="Func_weekday_Arg_0">
    <value>Date</value>
  </data>
  <data name="Func_weekday_Arg_1">
    <value>ReturnType</value>
  </data>
  <data name="Func_weekday_ArgDesc_0">
    <value>The date of which to find the day of week number.</value>
  </data>
  <data name="Func_weekday_ArgDesc_1">
    <value>Determines which numbering scheme is used for the days of the week.
1 (default) = Sunday (1) through Saturday (7)
2 = Monday (1) through Sunday (7)
3 = Monday (0) through Sunday (6)
    </value>
  </data>
  <data name="Func_weekday_CategoryURL">
    <value>DateAndTime</value>
  </data>
  <data name="Func_dec2bin_Desc">
    <value>Returns a text expression representing the specified decimal value as a binary number.</value>
  </data>
  <data name="Func_dec2bin_Category">
    <value>Engineering</value>
  </data>
  <data name="Func_dec2bin_Arg_0">
    <value>Number</value>
  </data>
  <data name="Func_dec2bin_Arg_1">
    <value>Places</value>
  </data>
  <data name="Func_dec2bin_ArgDesc_0">
    <value>The decimal value to be converted.</value>
  </data>
  <data name="Func_dec2bin_ArgDesc_1">
    <value>The number of characters to use in representing the value. If places is not specified, the mimumum number of characters neccessary to represent the value will be used. This allows you to specify leading zeros.</value>
  </data>
  <data name="Func_dec2bin_CategoryURL">
    <value>Engineering</value>
  </data>
  <data name="Func_dec2hex_Desc">
    <value>Returns a text expression representing the specified decimal value as a hexadecimal number.</value>
  </data>
  <data name="Func_dec2hex_Category">
    <value>Engineering</value>
  </data>
  <data name="Func_dec2hex_Arg_0">
    <value>Number</value>
  </data>
  <data name="Func_dec2hex_Arg_1">
    <value>Places</value>
  </data>
  <data name="Func_dec2hex_ArgDesc_0">
    <value>The decimal value to be converted.</value>
  </data>
  <data name="Func_dec2hex_ArgDesc_1">
    <value>The number of characters to use in representing the value. If places is not specified, the mimumum number of characters neccessary to represent the value will be used. This allows you to specify leading zeros.</value>
  </data>
  <data name="Func_dec2hex_CategoryURL">
    <value>Engineering</value>
  </data>
  <data name="Func_dec2oct_Desc">
    <value>Returns a text expression representing the specified decimal value as an octal number.</value>
  </data>
  <data name="Func_dec2oct_Category">
    <value>Engineering</value>
  </data>
  <data name="Func_dec2oct_Arg_0">
    <value>Number</value>
  </data>
  <data name="Func_dec2oct_Arg_1">
    <value>Places</value>
  </data>
  <data name="Func_dec2oct_ArgDesc_0">
    <value>The decimal value to be converted.</value>
  </data>
  <data name="Func_dec2oct_ArgDesc_1">
    <value>The number of characters to use in representing the value. If places is not specified, the mimumum number of characters neccessary to represent the value will be used. This allows you to specify leading zeros.</value>
  </data>
  <data name="Func_dec2oct_CategoryURL">
    <value>Engineering</value>
  </data>
  <data name="Func_bin2dec_Desc">
    <value>Returns the decimal value of a text representation of a number in the binary number system.</value>
  </data>
  <data name="Func_bin2dec_Category">
    <value>Engineering</value>
  </data>
  <data name="Func_bin2dec_Arg_0">
    <value>Number</value>
  </data>
  <data name="Func_bin2dec_ArgDesc_0">
    <value>A text expression represeting a binary number.</value>
  </data>
  <data name="Func_bin2dec_CategoryURL">
    <value>Engineering</value>
  </data>
  <data name="Func_hex2dec_Desc">
    <value>Returns the decimal value of a text representation of a number in the hexadecimal number system.</value>
  </data>
  <data name="Func_hex2dec_Category">
    <value>Engineering</value>
  </data>
  <data name="Func_hex2dec_Arg_0">
    <value>Number</value>
  </data>
  <data name="Func_hex2dec_ArgDesc_0">
    <value>A text expression represeting a hexadecimal number.</value>
  </data>
  <data name="Func_hex2dec_CategoryURL">
    <value>Engineering</value>
  </data>
  <data name="Func_oct2dec_Desc">
    <value>Returns the decimal value of a text representation of a number in the octal number system.</value>
  </data>
  <data name="Func_oct2dec_Category">
    <value>Engineering</value>
  </data>
  <data name="Func_oct2dec_Arg_0">
    <value>Number</value>
  </data>
  <data name="Func_oct2dec_ArgDesc_0">
    <value>A text expression represeting an octal number.</value>
  </data>
  <data name="Func_oct2dec_CategoryURL">
    <value>Engineering</value>
  </data>
  <data name="Func_bin2oct_Desc">
    <value>Converts a text expression representing a binary number to a text expression representing the same number in the octal number system.</value>
  </data>
  <data name="Func_bin2oct_Category">
    <value>Engineering</value>
  </data>
  <data name="Func_bin2oct_Arg_0">
    <value>Number</value>
  </data>
  <data name="Func_bin2oct_Arg_1">
    <value>Places</value>
  </data>
  <data name="Func_bin2oct_ArgDesc_0">
    <value>A text expression represeting a binary number.</value>
  </data>
  <data name="Func_bin2oct_ArgDesc_1">
    <value>The number of characters to use in representing the value. If this is not specified, the mimumum number of characters neccessary to represent the value will be used. This allows you to specify leading zeros.</value>
  </data>
  <data name="Func_bin2oct_CategoryURL">
    <value>Engineering</value>
  </data>
  <data name="Func_bin2hex_Desc">
    <value>Converts a text expression representing a binary number to a text expression representing the same number in the hexadecimal number system.</value>
  </data>
  <data name="Func_bin2hex_Category">
    <value>Engineering</value>
  </data>
  <data name="Func_bin2hex_Arg_0">
    <value>Number</value>
  </data>
  <data name="Func_bin2hex_Arg_1">
    <value>Places</value>
  </data>
  <data name="Func_bin2hex_ArgDesc_0">
    <value>A text expression represeting a binary number.</value>
  </data>
  <data name="Func_bin2hex_ArgDesc_1">
    <value>The number of characters to use in representing the value. If this is not specified, the mimumum number of characters neccessary to represent the value will be used. This allows you to specify leading zeros.</value>
  </data>
  <data name="Func_bin2hex_CategoryURL">
    <value>Engineering</value>
  </data>
  <data name="Func_oct2bin_Desc">
    <value>Converts a text expression representing an octal number to a text expression representing the same number in the binary number system.</value>
  </data>
  <data name="Func_oct2bin_Category">
    <value>Engineering</value>
  </data>
  <data name="Func_oct2bin_Arg_0">
    <value>Number</value>
  </data>
  <data name="Func_oct2bin_Arg_1">
    <value>Places</value>
  </data>
  <data name="Func_oct2bin_ArgDesc_0">
    <value>A text expression represeting an octal number.</value>
  </data>
  <data name="Func_oct2bin_ArgDesc_1">
    <value>The number of characters to use in representing the value. If this is not specified, the mimumum number of characters neccessary to represent the value will be used. This allows you to specify leading zeros.</value>
  </data>
  <data name="Func_oct2bin_CategoryURL">
    <value>Engineering</value>
  </data>
  <data name="Func_oct2hex_Desc">
    <value>Converts a text expression representing an octal number to a text expression representing the same number in the hexadecimal number system.</value>
  </data>
  <data name="Func_oct2hex_Category">
    <value>Engineering</value>
  </data>
  <data name="Func_oct2hex_Arg_0">
    <value>Number</value>
  </data>
  <data name="Func_oct2hex_Arg_1">
    <value>Places</value>
  </data>
  <data name="Func_oct2hex_ArgDesc_0">
    <value>A text expression represeting an octal number.</value>
  </data>
  <data name="Func_oct2hex_ArgDesc_1">
    <value>The number of characters to use in representing the value. If this is not specified, the mimumum number of characters neccessary to represent the value will be used. This allows you to specify leading zeros.</value>
  </data>
  <data name="Func_oct2hex_CategoryURL">
    <value>Engineering</value>
  </data>
  <data name="Func_hex2bin_Desc">
    <value>Converts a text expression representing a hexadecimal number to a text expression representing the same number in the binary number system.</value>
  </data>
  <data name="Func_hex2bin_Category">
    <value>Engineering</value>
  </data>
  <data name="Func_hex2bin_Arg_0">
    <value>Number</value>
  </data>
  <data name="Func_hex2bin_Arg_1">
    <value>Places</value>
  </data>
  <data name="Func_hex2bin_ArgDesc_0">
    <value>A text expression represeting a hexadecimal number.</value>
  </data>
  <data name="Func_hex2bin_ArgDesc_1">
    <value>The number of characters to use in representing the value. If this is not specified, the mimumum number of characters neccessary to represent the value will be used. This allows you to specify leading zeros.</value>
  </data>
  <data name="Func_hex2bin_CategoryURL">
    <value>Engineering</value>
  </data>
  <data name="Func_hex2oct_Desc">
    <value>Converts a text expression representing a hexadecimal number to a text expression representing the same number in the octal number system.</value>
  </data>
  <data name="Func_hex2oct_Category">
    <value>Engineering</value>
  </data>
  <data name="Func_hex2oct_Arg_0">
    <value>Number</value>
  </data>
  <data name="Func_hex2oct_Arg_1">
    <value>Places</value>
  </data>
  <data name="Func_hex2oct_ArgDesc_0">
    <value>A text expression represeting a hexadecimal number.</value>
  </data>
  <data name="Func_hex2oct_ArgDesc_1">
    <value>The number of characters to use in representing the value. If this is not specified, the mimumum number of characters neccessary to represent the value will be used. This allows you to specify leading zeros.</value>
  </data>
  <data name="Func_hex2oct_CategoryURL">
    <value>Engineering</value>
  </data>

  <data name="Func_convert_Desc">
    <value>Converts a value from one system of measurement to another, such as meters to inches or hours to seconds.</value>
  </data>
  <data name="Func_convert_Category">
    <value>Engineering</value>
  </data>
  <data name="Func_convert_Arg_0">
    <value>Number</value>
  </data>
  <data name="Func_convert_Arg_1">
    <value>FromUnit</value>
  </data>
  <data name="Func_convert_Arg_2">
    <value>ToUnit</value>
  </data>
  <data name="Func_convert_ArgDesc_0">
    <value>The value to convert.</value>
  </data>
  <data name="Func_convert_ArgDesc_1">
    <value>The unit in which the number is given.
    
Weight and mass units: "g" = gram; "sg" = slug; "lbm" = pound mass (avoirdupois); "u" = U (atomic mass unit); "ozm" = Ounce mass (avoirdupois)
Distance units: "m" = Meter; "mi" = Statute mile; "Nmi" = Nautical mile; "in" = Inch; "ft" = Foot; "yd" = Yard; "ang" = Angstrom; "Pica" = Pica (1/72 in.)
Time units: "yr" = Year; "day" = Day; "hr" = Hour; "mn" = Minute; "sec" = Second
Pressure units: "Pa" (or "p") = Pascal; "atm" (or "at") = Atmosphere; "mmHg" = mm of Mercury
Force units: "N" = Newton; "dyn" (or "dy") = Dyne; "lbf" = Pound force
Energy units: "J" = Joule; "e" = Erg; "c" = Thermodynamic calorie; "cal" = IT calorie; "eV" (or "ev") = Electron volt; "HPh" (or "hh") = Horsepower-hour; "Wh" (or "wh") = Watt-hour; "flb" = Foot-pound; "BTU" (or "btu") = BTU
Power units: "HP" (or "h") = Horsepower; "W" (or "w") = Watt
Magentism units: "T" = Tesla; "ga" = Gauss
Temperature units: "C" (or "cel") = Degree Celsius; "F" (or "fah") = Degree Fahrenheit; "K" (or "kel") = Kelvin
Liquid measure units: "tsp" = Teaspoon; "tbs" = Tablespoon; "oz" = Fluid ounce; "cup" = Cup; "pt" (or "us_pt") = U.S. pint; "uk_pt" = U.K. pint; "qt" = Quart; "gal" = Gallon; "l" (or "lt") = Liter

Any metric unit may be prefixed with one of the following: exa ("E") = 1E+18; peta ("P") = 1E+15; tera ("T") = 1E+12; giga ("G") = 1E+09; mega ("M") = 1E+06; kilo ("k") = 1E+03; hecto ("h") = 1E+02; dekao ("e") = 1E+01; deci ("d") = 1E-01; centi ("c") = 1E-02; milli ("m") = 1E-03; micro ("u") = 1E-06; nano ("n") = 1E-09; pico ("p") = 1E-12; femto ("f") = 1E-15; atto ("a") = 1E-18
    </value>
  </data>
  <data name="Func_convert_ArgDesc_2">
    <value>The units in which to return the converted value.
    
Weight and mass units: "g" = gram; "sg" = slug; "lbm" = pound mass (avoirdupois); "u" = U (atomic mass unit); "ozm" = Ounce mass (avoirdupois)
Distance units: "m" = Meter; "mi" = Statute mile; "Nmi" = Nautical mile; "in" = Inch; "ft" = Foot; "yd" = Yard; "ang" = Angstrom; "Pica" = Pica (1/72 in.)
Time units: "yr" = Year; "day" = Day; "hr" = Hour; "mn" = Minute; "sec" = Second
Pressure units: "Pa" (or "p") = Pascal; "atm" (or "at") = Atmosphere; "mmHg" = mm of Mercury
Force units: "N" = Newton; "dyn" (or "dy") = Dyne; "lbf" = Pound force
Energy units: "J" = Joule; "e" = Erg; "c" = Thermodynamic calorie; "cal" = IT calorie; "eV" (or "ev") = Electron volt; "HPh" (or "hh") = Horsepower-hour; "Wh" (or "wh") = Watt-hour; "flb" = Foot-pound; "BTU" (or "btu") = BTU
Power units: "HP" (or "h") = Horsepower; "W" (or "w") = Watt
Magentism units: "T" = Tesla; "ga" = Gauss
Temperature units: "C" (or "cel") = Degree Celsius; "F" (or "fah") = Degree Fahrenheit; "K" (or "kel") = Kelvin
Liquid measure units: "tsp" = Teaspoon; "tbs" = Tablespoon; "oz" = Fluid ounce; "cup" = Cup; "pt" (or "us_pt") = U.S. pint; "uk_pt" = U.K. pint; "qt" = Quart; "gal" = Gallon; "l" (or "lt") = Liter

Any metric unit may be prefixed with one of the following: exa ("E") = 1E+18; peta ("P") = 1E+15; tera ("T") = 1E+12; giga ("G") = 1E+09; mega ("M") = 1E+06; kilo ("k") = 1E+03; hecto ("h") = 1E+02; dekao ("e") = 1E+01; deci ("d") = 1E-01; centi ("c") = 1E-02; milli ("m") = 1E-03; micro ("u") = 1E-06; nano ("n") = 1E-09; pico ("p") = 1E-12; femto ("f") = 1E-15; atto ("a") = 1E-18
    </value>
  </data>
  <data name="Func_convert_CategoryURL">
    <value>Engineering</value>
  </data>
  <data name="Func_delta_Desc">
    <value>Compares two numbers and returns one if they are equal or zero if they are not.</value>
  </data>
  <data name="Func_delta_Category">
    <value>Engineering</value>
  </data>
  <data name="Func_delta_Arg_0">
    <value>Number1</value>
  </data>
  <data name="Func_delta_Arg_1">
    <value>Number2</value>
  </data>
  <data name="Func_delta_ArgDesc_0">
    <value>The first number to compare.</value>
  </data>
  <data name="Func_delta_ArgDesc_1">
    <value>The second number to compare. If not specified, it will be assumed to be zero.</value>
  </data>
  <data name="Func_delta_CategoryURL">
    <value>Engineering</value>
  </data>
  <data name="Func_gestep_Desc">
    <value>Compares two numbers and returns one if the first number is greater than or equal to the second or returns zero if not.</value>
  </data>
  <data name="Func_gestep_Category">
    <value>Engineering</value>
  </data>
  <data name="Func_gestep_Arg_0">
    <value>Number1</value>
  </data>
  <data name="Func_gestep_Arg_1">
    <value>Step</value>
  </data>
  <data name="Func_gestep_ArgDesc_0">
    <value>The first number to compare.</value>
  </data>
  <data name="Func_gestep_ArgDesc_1">
    <value>The second number to compare. If not specified, it will be assumed to be zero.</value>
  </data>
  <data name="Func_gestep_CategoryURL">
    <value>Engineering</value>
  </data>
  <data name="Func_complex_Desc">
    <value>Returns a complex number represented as a text expression in the format "x + yi" or "x + yj" by combining a real and imaginary number.</value>
  </data>
  <data name="Func_complex_Category">
    <value>Engineering</value>
  </data>
  <data name="Func_complex_Arg_0">
    <value>RealNumber</value>
  </data>
  <data name="Func_complex_Arg_1">
    <value>ImaginaryNumber</value>
  </data>
  <data name="Func_complex_Arg_2">
    <value>Suffix</value>
  </data>
  <data name="Func_complex_ArgDesc_0">
    <value>The real coefficient of the complex number.</value>
  </data>
  <data name="Func_complex_ArgDesc_1">
    <value>The imaginary coefficient of the number.</value>
  </data>
  <data name="Func_complex_ArgDesc_2">
    <value>Specifies the suffix to use. The acceptable values are "i" or "j". If omitted, "i" is used. Note that the suffix is case-sensitive; upper case "I" and "J" are not allowed and will result in a #VALUE error.</value>
  </data>
  <data name="Func_complex_CategoryURL">
    <value>Engineering</value>
  </data>
  <data name="Func_imabs_Desc">
    <value>Returns the absolute value of a complex number.</value>
  </data>
  <data name="Func_imabs_Category">
    <value>Engineering</value>
  </data>
  <data name="Func_imabs_Arg_0">
    <value>ComplexNumber</value>
  </data>
  <data name="Func_imabs_ArgDesc_0">
    <value>The text representation of a complex number in the format: "x + yi" or "x + yj".</value>
  </data>
  <data name="Func_imabs_CategoryURL">
    <value>Engineering</value>
  </data>
  <data name="Func_imaginary_Desc">
    <value>Returns the imaginary coefficient of a complex number.</value>
  </data>
  <data name="Func_imaginary_Category">
    <value>Engineering</value>
  </data>
  <data name="Func_imaginary_Arg_0">
    <value>ComplexNumber</value>
  </data>
  <data name="Func_imaginary_ArgDesc_0">
    <value>The text representation of a complex number in the format: "x + yi" or "x + yj".</value>
  </data>
  <data name="Func_imaginary_CategoryURL">
    <value>Engineering</value>
  </data>
  <data name="Func_imreal_Desc">
    <value>Returns the real coefficient of a complex number.</value>
  </data>
  <data name="Func_imreal_Category">
    <value>Engineering</value>
  </data>
  <data name="Func_imreal_Arg_0">
    <value>ComplexNumber</value>
  </data>
  <data name="Func_imreal_ArgDesc_0">
    <value>The text representation of a complex number in the format: "x + yi" or "x + yj".</value>
  </data>
  <data name="Func_imreal_CategoryURL">
    <value>Engineering</value>
  </data>
  <data name="Func_imargument_Desc">
    <value>Returns the argument theta, an angle expressed in radians.</value>
  </data>
  <data name="Func_imargument_Category">
    <value>Engineering</value>
  </data>
  <data name="Func_imargument_Arg_0">
    <value>ComplexNumber</value>
  </data>
  <data name="Func_imargument_ArgDesc_0">
    <value>The text representation of a complex number in the format: "x + yi" or "x + yj".</value>
  </data>
  <data name="Func_imargument_CategoryURL">
    <value>Engineering</value>
  </data>
  <data name="Func_imconjugate_Desc">
    <value>Returns the conjugate of a complex number.</value>
  </data>
  <data name="Func_imconjugate_Category">
    <value>Engineering</value>
  </data>
  <data name="Func_imconjugate_Arg_0">
    <value>ComplexNumber</value>
  </data>
  <data name="Func_imconjugate_ArgDesc_0">
    <value>The text representation of a complex number in the format: "x + yi" or "x + yj".</value>
  </data>
  <data name="Func_imconjugate_CategoryURL">
    <value>Engineering</value>
  </data>
  <data name="Func_imcos_Desc">
    <value>Returns the cosine of a complex number.</value>
  </data>
  <data name="Func_imcos_Category">
    <value>Engineering</value>
  </data>
  <data name="Func_imcos_Arg_0">
    <value>ComplexNumber</value>
  </data>
  <data name="Func_imcos_ArgDesc_0">
    <value>The text representation of a complex number in the format: "x + yi" or "x + yj".</value>
  </data>
  <data name="Func_imcos_CategoryURL">
    <value>Engineering</value>
  </data>
  <data name="Func_imdiv_Desc">
    <value>Returns the quotient of two complex numbers (Dividend / Divisor).</value>
  </data>
  <data name="Func_imdiv_Category">
    <value>Engineering</value>
  </data>
  <data name="Func_imdiv_Arg_0">
    <value>Dividend</value>
  </data>
  <data name="Func_imdiv_Arg_1">
    <value>Divisor</value>
  </data>
  <data name="Func_imdiv_ArgDesc_0">
    <value>The text representation of a complex number in the format: "x + yi" or "x + yj".</value>
  </data>
  <data name="Func_imdiv_ArgDesc_1">
    <value>The text representation of a complex number in the format: "x + yi" or "x + yj".</value>
  </data>
  <data name="Func_imdiv_CategoryURL">
    <value>Engineering</value>
  </data>
  <data name="Func_imexp_Desc">
    <value>Returns the exponential of a complex number.</value>
  </data>
  <data name="Func_imexp_Category">
    <value>Engineering</value>
  </data>
  <data name="Func_imexp_Arg_0">
    <value>ComplexNumber</value>
  </data>
  <data name="Func_imexp_ArgDesc_0">
    <value>The text representation of a complex number in the format: "x + yi" or "x + yj".</value>
  </data>
  <data name="Func_imexp_CategoryURL">
    <value>Engineering</value>
  </data>
  <data name="Func_imln_Desc">
    <value>Returns the natural logarithm of a complex number.</value>
  </data>
  <data name="Func_imln_Category">
    <value>Engineering</value>
  </data>
  <data name="Func_imln_Arg_0">
    <value>ComplexNumber</value>
  </data>
  <data name="Func_imln_ArgDesc_0">
    <value>The text representation of a complex number in the format: "x + yi" or "x + yj".</value>
  </data>
  <data name="Func_imln_CategoryURL">
    <value>Engineering</value>
  </data>
  <data name="Func_imsub_Desc">
    <value>Returns the difference between two complex numbers.</value>
  </data>
  <data name="Func_imsub_Category">
    <value>Engineering</value>
  </data>
  <data name="Func_imsub_Arg_0">
    <value>ComplexNumber1</value>
  </data>
  <data name="Func_imsub_Arg_1">
    <value>ComplexNumber2</value>
  </data>
  <data name="Func_imsub_ArgDesc_0">
    <value>The text representation of a complex number in the format: "x + yi" or "x + yj" from which ComplexNumber2 will be subtracted.</value>
  </data>
  <data name="Func_imsub_ArgDesc_1">
    <value>The text representation of a complex number in the format: "x + yi" or "x + yj" which will be subtracted from ComplexNumber1.</value>
  </data>
  <data name="Func_imsub_CategoryURL">
    <value>Engineering</value>
  </data>
  <data name="Func_improduct_Desc">
    <value>Returns the product of one or more complex numbers.</value>
  </data>
  <data name="Func_improduct_Category">
    <value>Engineering</value>
  </data>
  <data name="Func_improduct_Arg_0">
    <value>ComplexNumber{0}</value>
  </data>
  <data name="Func_improduct_ArgDesc_0">
    <value>The text representation of a complex number in the format: "x + yi" or "x + yj".</value>
  </data>
  <data name="Func_improduct_CategoryURL">
    <value>Engineering</value>
  </data>
  <data name="Func_imsum_Desc">
    <value>Returns the sum of one or more complex numbers.</value>
  </data>
  <data name="Func_imsum_Category">
    <value>Engineering</value>
  </data>
  <data name="Func_imsum_Arg_0">
    <value>ComplexNumber{0}</value>
  </data>
  <data name="Func_imsum_ArgDesc_0">
    <value>The text representation of a complex number in the format: "x + yi" or "x + yj".</value>
  </data>
  <data name="Func_imsum_CategoryURL">
    <value>Engineering</value>
  </data>
  <data name="Func_imlog10_Desc">
    <value>Returns the base-10 logarithm of a complex number.</value>
  </data>
  <data name="Func_imlog10_Category">
    <value>Engineering</value>
  </data>
  <data name="Func_imlog10_Arg_0">
    <value>ComplexNumber</value>
  </data>
  <data name="Func_imlog10_ArgDesc_0">
    <value>The text representation of a complex number in the format: "x + yi" or "x + yj".</value>
  </data>
  <data name="Func_imlog10_CategoryURL">
    <value>Engineering</value>
  </data>
  <data name="Func_imlog2_Desc">
    <value>Returns the base-2 logarithm of a complex number.</value>
  </data>
  <data name="Func_imlog2_Category">
    <value>Engineering</value>
  </data>
  <data name="Func_imlog2_Arg_0">
    <value>ComplexNumber</value>
  </data>
  <data name="Func_imlog2_ArgDesc_0">
    <value>The text representation of a complex number in the format: "x + yi" or "x + yj".</value>
  </data>
  <data name="Func_imlog2_CategoryURL">
    <value>Engineering</value>
  </data>
  <data name="Func_imsin_Desc">
    <value>Returns the sine of a complex number.</value>
  </data>
  <data name="Func_imsin_Category">
    <value>Engineering</value>
  </data>
  <data name="Func_imsin_Arg_0">
    <value>ComplexNumber</value>
  </data>
  <data name="Func_imsin_ArgDesc_0">
    <value>The text representation of a complex number in the format: "x + yi" or "x + yj".</value>
  </data>
  <data name="Func_imsin_CategoryURL">
    <value>Engineering</value>
  </data>
  <data name="Func_imsqrt_Desc">
    <value>Returns the square root of a complex number.</value>
  </data>
  <data name="Func_imsqrt_Category">
    <value>Engineering</value>
  </data>
  <data name="Func_imsqrt_Arg_0">
    <value>ComplexNumber</value>
  </data>
  <data name="Func_imsqrt_ArgDesc_0">
    <value>The text representation of a complex number in the format: "x + yi" or "x + yj".</value>
  </data>
  <data name="Func_imsqrt_CategoryURL">
    <value>Engineering</value>
  </data>
  <data name="Func_impower_Desc">
    <value>Returns the complex number raised to the specified power.</value>
  </data>
  <data name="Func_impower_Category">
    <value>Engineering</value>
  </data>
  <data name="Func_impower_Arg_0">
    <value>ComplexNumber</value>
  </data>
  <data name="Func_impower_Arg_1">
    <value>Power</value>
  </data>
  <data name="Func_impower_ArgDesc_0">
    <value>The text representation of a complex number in the format: "x + yi" or "x + yj".</value>
  </data>
  <data name="Func_impower_ArgDesc_1">
    <value>The power to which ComplexNumber will be raised.</value>
  </data>
  <data name="Func_impower_CategoryURL">
    <value>Engineering</value>
  </data>
  <data name="Func_dollarfr_Desc">
    <value>Converts a dollar amount expressed as a decimal into a dollar amount expressed as a fraction.</value>
  </data>
  <data name="Func_dollarfr_Category">
    <value>Financial</value>
  </data>
  <data name="Func_dollarfr_Arg_0">
    <value>DecimalDollarAmount</value>
  </data>
  <data name="Func_dollarfr_Arg_1">
    <value>Fraction</value>
  </data>
  <data name="Func_dollarfr_ArgDesc_0">
    <value>The dollar amount expressed as a decimal.</value>
  </data>
  <data name="Func_dollarfr_ArgDesc_1">
    <value>The value used as the denominator of the fraction. If this value is not an integer, it will be truncated.</value>
  </data>
  <data name="Func_dollarfr_CategoryURL">
    <value>Financial</value>
  </data>
  <data name="Func_dollarde_Desc">
    <value>Converts a dollar amount expressed as a fraction into a dollar amount expressed as a decimal.</value>
  </data>
  <data name="Func_dollarde_Category">
    <value>Financial</value>
  </data>
  <data name="Func_dollarde_Arg_0">
    <value>FractionDollarAmount</value>
  </data>
  <data name="Func_dollarde_Arg_1">
    <value>Fraction</value>
  </data>
  <data name="Func_dollarde_ArgDesc_0">
    <value>The dollar amount expressed as a fraction.</value>
  </data>
  <data name="Func_dollarde_ArgDesc_1">
    <value>The value used as the denominator of the fraction. If this value is not an integer, it will be truncated.</value>
  </data>
  <data name="Func_dollarde_CategoryURL">
    <value>Financial</value>
  </data>
  <data name="Func_info_Desc">
    <value>Returns information about the current operating environment.</value>
  </data>
  <data name="Func_info_Category">
    <value>Information</value>
  </data>
  <data name="Func_info_Arg_0">
    <value>Type</value>
  </data>
  <data name="Func_info_ArgDesc_0">
    <value>A text expression indicating the type of information to return.
"directory" = The full path to the current folder.
"osversion" = The currently operating system version as a text expression.
"system" = The current operating system. Macintosh = "mac", Windows = "pcdos".
    </value>
  </data>
  <data name="Func_info_CategoryURL">
    <value>Information</value>
  </data>
  <data name="Func_n_Desc">
    <value>Converts a value to a number.</value>
  </data>
  <data name="Func_n_Category">
    <value>Information</value>
  </data>
  <data name="Func_n_Arg_0">
    <value>Value</value>
  </data>
  <data name="Func_n_ArgDesc_0">
    <value>The value to be converted to a number. The following are acceptable values:
A number - returns the number.
A date - returns the date.
True - returns 1.
False - returns 0.
An error value - returns the error value.
Any other value - returns 0.
    </value>
  </data>
  <data name="Func_n_CategoryURL">
    <value>Information</value>
  </data>
  <data name="Func_fact_Desc">
    <value>Returns the factorial of a number.</value>
  </data>
  <data name="Func_fact_Category">
    <value>Math</value>
  </data>
  <data name="Func_fact_Arg_0">
    <value>Number</value>
  </data>
  <data name="Func_fact_ArgDesc_0">
    <value>A positive number for which the factorial will be calculated.</value>
  </data>
  <data name="Func_fact_CategoryURL">
    <value>Math</value>
  </data>
  <data name="Func_factdouble_Desc">
    <value>Returns the double factorial of a number.</value>
  </data>
  <data name="Func_factdouble_Category">
    <value>Math</value>
  </data>
  <data name="Func_factdouble_Arg_0">
    <value>Number</value>
  </data>
  <data name="Func_factdouble_ArgDesc_0">
    <value>A positive number for which the double factorial will be calculated.</value>
  </data>
  <data name="Func_factdouble_CategoryURL">
    <value>Math</value>
  </data>
  <data name="Func_degrees_Desc">
    <value>Converts radians to degrees.</value>
  </data>
  <data name="Func_degrees_Category">
    <value>Math</value>
  </data>
  <data name="Func_degrees_Arg_0">
    <value>Radians</value>
  </data>
  <data name="Func_degrees_ArgDesc_0">
    <value>A value in radians which will be converted to degrees.</value>
  </data>
  <data name="Func_degrees_CategoryURL">
    <value>Math</value>
  </data>
  <data name="Func_radians_Desc">
    <value>Converts degrees to radians.</value>
  </data>
  <data name="Func_radians_Category">
    <value>Math</value>
  </data>
  <data name="Func_radians_Arg_0">
    <value>Degrees</value>
  </data>
  <data name="Func_radians_ArgDesc_0">
    <value>A value in degrees which will be converted to radians.</value>
  </data>
  <data name="Func_radians_CategoryURL">
    <value>Math</value>
  </data>
  <data name="Func_gcd_Desc">
    <value>Returns the greatest common divisor of one or more integer values.</value>
  </data>
  <data name="Func_gcd_Category">
    <value>Math</value>
  </data>
  <data name="Func_gcd_Arg_0">
    <value>number{0}</value>
  </data>
  <data name="Func_gcd_ArgDesc_0">
    <value>An integer value. A non-integer value will be truncated.</value>
  </data>
  <data name="Func_gcd_CategoryURL">
    <value>Math</value>
  </data>
  <data name="Func_lcm_Desc">
    <value>Returns the least common multiple of one or more integer values.</value>
  </data>
  <data name="Func_lcm_Category">
    <value>Math</value>
  </data>
  <data name="Func_lcm_Arg_0">
    <value>number{0}</value>
  </data>
  <data name="Func_lcm_ArgDesc_0">
    <value>An integer value. A non-integer value will be truncated.</value>
  </data>
  <data name="Func_lcm_CategoryURL">
    <value>Math</value>
  </data>
  <data name="Func_mround_Desc">
    <value>Rounds a number to the nearest multiple of another number.</value>
  </data>
  <data name="Func_mround_Category">
    <value>Math</value>
  </data>
  <data name="Func_mround_Arg_0">
    <value>Number</value>
  </data>
  <data name="Func_mround_ArgDesc_0">
    <value>The number to be rounded.</value>
  </data>
  <data name="Func_mround_Arg_1">
    <value>Multiple</value>
  </data>
  <data name="Func_mround_ArgDesc_1">
    <value>A number indicating the multiple to which to round.</value>
  </data>
  <data name="Func_mround_CategoryURL">
    <value>Math</value>
  </data>
  <data name="Func_multinomial_Desc">
    <value>Returns the multinomial of a set of numbers. The multinomial is the ratio of the factorial of a sum of values to the product of their factorials.</value>
  </data>
  <data name="Func_multinomial_Category">
    <value>Math</value>
  </data>
  <data name="Func_multinomial_Arg_0">
    <value>number{0}</value>
  </data>
  <data name="Func_multinomial_ArgDesc_0">
    <value>One of the numbers for which to get the multinomial.</value>
  </data>
  <data name="Func_multinomial_CategoryURL">
    <value>Math</value>
  </data>
  <data name="Func_randbetween_Desc">
    <value>Generates a pseudorandom integer between two specified numbers.</value>
  </data>
  <data name="Func_randbetween_Category">
    <value>Math</value>
  </data>
  <data name="Func_randbetween_Arg_0">
    <value>Bottom</value>
  </data>
  <data name="Func_randbetween_Arg_1">
    <value>Top</value>
  </data>
  <data name="Func_randbetween_ArgDesc_0">
    <value>The minumum value that will be returned.</value>
  </data>
  <data name="Func_randbetween_ArgDesc_1">
    <value>The maximum value that will be returned.</value>
  </data>
  <data name="Func_randbetween_CategoryURL">
    <value>Math</value>
  </data>
  <data name="Func_roman_Desc">
    <value>Converts a number into a roman number as a text expression.</value>
  </data>
  <data name="Func_roman_Category">
    <value>Math</value>
  </data>
  <data name="Func_roman_Arg_0">
    <value>Number</value>
  </data>
  <data name="Func_roman_Arg_1">
    <value>Form</value>
  </data>
  <data name="Func_roman_ArgDesc_0">
    <value>The number to convert to roman numerals.</value>
  </data>
  <data name="Func_roman_ArgDesc_1">
    <value>A number or boolean value indicating whether to use classic roman numerals or a more concise version.
0  = (Default) Classic. (499 = "CDXCIX")
1  = More concise. (499 = "LDVLIV")
2  = More concise. (499 = "XDIX")
3  = More concise. (499 = "VDIV")
4  = Simplified. (499 = "ID")
True = Classic.
False = Simplified.
    </value>
  </data>
  <data name="Func_roman_CategoryURL">
    <value>Math</value>
  </data>
  <data name="Func_rounddown_Desc">
    <value>Rounds a number to down to the specified number of digits.</value>
  </data>
  <data name="Func_rounddown_Category">
    <value>Math</value>
  </data>
  <data name="Func_rounddown_Arg_0">
    <value>Number</value>
  </data>
  <data name="Func_rounddown_Arg_1">
    <value>Digits</value>
  </data>
  <data name="Func_rounddown_ArgDesc_0">
    <value>The number to be rounded down.</value>
  </data>
  <data name="Func_rounddown_ArgDesc_1">
    <value>The number of decimal places to round. Positive numbers indicates places after the decimal point, negative numbers indicate places before the decimal point.</value>
  </data>
  <data name="Func_rounddown_CategoryURL">
    <value>Math</value>
  </data>
  <data name="Func_roundup_Desc">
    <value>Rounds a number to up to the specified number of digits.</value>
  </data>
  <data name="Func_roundup_Category">
    <value>Math</value>
  </data>
  <data name="Func_roundup_Arg_0">
    <value>Number</value>
  </data>
  <data name="Func_roundup_Arg_1">
    <value>Digits</value>
  </data>
  <data name="Func_roundup_ArgDesc_0">
    <value>The number to be rounded up.</value>
  </data>
  <data name="Func_roundup_ArgDesc_1">
    <value>The number of decimal places to round. Positive numbers indicates places after the decimal point, negative numbers indicate places before the decimal point.</value>
  </data>
  <data name="Func_roundup_CategoryURL">
    <value>Math</value>
  </data>
  <data name="Func_seriessum_Desc">
    <value>Returns the sum of a power series.</value>
  </data>
  <data name="Func_seriessum_Category">
    <value>Math</value>
  </data>
  <data name="Func_seriessum_Arg_0">
    <value>InputValue</value>
  </data>
  <data name="Func_seriessum_Arg_1">
    <value>InitialPower</value>
  </data>
  <data name="Func_seriessum_Arg_2">
    <value>Step</value>
  </data>
  <data name="Func_seriessum_Arg_3">
    <value>Coefficients</value>
  </data>
  <data name="Func_seriessum_ArgDesc_0">
    <value>The input value to the power series.</value>
  </data>
  <data name="Func_seriessum_ArgDesc_1">
    <value>The initial power to which the InputValue will be raised.</value>
  </data>
  <data name="Func_seriessum_ArgDesc_2">
    <value>The step which will be used to increase the power for each term in the series.</value>
  </data>
  <data name="Func_seriessum_ArgDesc_3">
    <value>A set of coefficients by which each successive power of InputValue is multiplied.</value>
  </data>
  <data name="Func_seriessum_CategoryURL">
    <value>Math</value>
  </data>
  <data name="Func_combin_Desc">
    <value>Returns the number of possible combinations given a set of items and a number of chosen items from that set.</value>
  </data>
  <data name="Func_combin_Category">
    <value>Math</value>
  </data>
  <data name="Func_combin_Arg_0">
    <value>Number</value>
  </data>
  <data name="Func_combin_Arg_1">
    <value>NumberChosen</value>
  </data>
  <data name="Func_combin_ArgDesc_0">
    <value>The number of items.</value>
  </data>
  <data name="Func_combin_ArgDesc_1">
    <value>The number of items chosen in each combination.</value>
  </data>
  <data name="Func_combin_CategoryURL">
    <value>Math</value>
  </data>
  <data name="Func_sign_Desc">
    <value>Returns the sign of a number (-1, 0, or 1).</value>
  </data>
  <data name="Func_sign_Category">
    <value>Math</value>
  </data>
  <data name="Func_sign_Arg_0">
    <value>Number</value>
  </data>
  <data name="Func_sign_ArgDesc_0">
    <value>The number whose sign will be returned.</value>
  </data>
  <data name="Func_sign_CategoryURL">
    <value>Math</value>
  </data>
  <data name="Func_sqrtpi_Desc">
    <value>Multiplies the specified number by pi and returns the square root of the result.</value>
  </data>
  <data name="Func_sqrtpi_Category">
    <value>Math</value>
  </data>
  <data name="Func_sqrtpi_Arg_0">
    <value>Number</value>
  </data>
  <data name="Func_sqrtpi_ArgDesc_0">
    <value>The number to multiply by pi.</value>
  </data>
  <data name="Func_sqrtpi_CategoryURL">
    <value>Math</value>
  </data>
	<data name="Func_choose_Desc">
		<value>Returns one of the values provided in its arguments based on the number in the first argument.</value>
	</data>
	<data name="Func_choose_Category">
		<value>LookupAndReference</value>
	</data>
	<data name="Func_choose_Arg_0">
		<value>IndexNum</value>
	</data>
	<data name="Func_choose_ArgDesc_0">
		<value>The 1-based index into the rest of the arguments for the value to use.</value>
	</data>
	<data name="Func_choose_Arg_1">
		<value>Value{0}</value>
	</data>
	<data name="Func_choose_ArgDesc_1">
		<value>A value which may be chosen depending on the IndexNum value.</value>
	</data>
	<data name="Func_choose_CategoryURL">
		<value>Lookup_And_Reference</value>
	</data>
	
  <!-- // MRS NAS 8.3 (END) -->
  <data name="Func_rept_Desc">
    <value>Repeats text a specific number of times.</value>
  </data>
  <data name="Func_rept_Category">
    <value>TextAndData</value>
  </data>
  <data name="Func_rept_CategoryURL">
    <value>Text_and_Data</value>
  </data>
  <data name="Func_rept_Arg_0">
    <value>TextValue</value>
  </data>
  <data name="Func_rept_ArgDesc_0">
    <value>The text to repeat.</value>
  </data>
  <data name="Func_rept_Arg_1">
    <value>RepeatCount</value>
  </data>
  <data name="Func_rept_ArgDesc_1">
    <value>The positive number of times to repeat the text.</value>
  </data>

  <data name="Func_subtotal_Desc">
    <value>Calculates the subtotal in one of more references.</value>
  </data>
  <data name="Func_subtotal_Category">
    <value>Math</value>
  </data>
  <data name="Func_subtotal_CategoryURL">
    <value>Math</value>
  </data>
  <data name="Func_subtotal_Arg_0">
    <value>FunctionNum</value>
  </data>
  <data name="Func_subtotal_ArgDesc_0">
    <value>A number representing the function to be calculated. Add 100 to the value to ignore hidden values.
1 (or 101) - AVERAGE
2 (or 102) - COUNT
4 (or 104) - MAX
5 (or 105) - MIN
6 (or 106) - PRODUCT
7 (or 107) - STDEV
9 (or 109) - SUM
10 (or 110) - VAR
    </value>
  </data>
  <data name="Func_subtotal_Arg_1">
    <value>Ref{0}</value>
  </data>
  <data name="Func_subtotal_ArgDesc_1">
    <value>One or more references for which to find the subtotal.</value>
  </data>
  <data name="Func_text_Desc">
    <value>Converts the value to text based on the specified format.</value>
  </data>
  <data name="Func_text_Category">
    <value>TextAndData</value>
  </data>
  <data name="Func_text_CategoryURL">
    <value>Text_and_Data</value>
  </data>
  <data name="Func_text_Arg_0">
    <value>Value</value>
  </data>
  <data name="Func_text_ArgDesc_0">
    <value>The numeric value which should be formatted.</value>
  </data>
  <data name="Func_text_Arg_1">
    <value>FormatText</value>
  </data>
  <data name="Func_text_ArgDesc_1">
    <value>The number format with which to format the value.</value>
  </data>
  <data name="Error_InvalidNumberSystemDigit">
    <value>Invalid digit of '{0}' encountered in the value '{1}' for the number system with base of {2}.</value>
  </data>
  
  <data name="Func_iferror_Desc">
    <value>Returns one of two values depending on whether or not the first value is an error or not.</value>
  </data>
  <data name="Func_iferror_Category">
    <value>Logical</value>
  </data>
  <data name="Func_iferror_Arg_0">
    <value>value</value>
  </data>
  <data name="Func_iferror_ArgDesc_0">
    <value>The value to use when it is not an error.</value>
  </data>
  <data name="Func_iferror_Arg_1">
    <value>value_if_error</value>
  </data>
  <data name="Func_iferror_ArgDesc_1">
    <value>The value to use if the value argument is an error.</value>
  </data>
  <data name="Func_iferror_CategoryURL">
    <value>Logical</value>
  </data>

  <!-- MD 3/2/12 - TFS103729 -->
  <data name="Func_search_Desc">
    <value>Returns the 1-based index of one string within another, searching case insensitively.</value>
  </data>
  <data name="Func_search_Category">
    <value>TextAndData</value>
  </data>
  <data name="Func_search_Arg_0">
    <value>search_text</value>
  </data>
  <data name="Func_search_ArgDesc_0">
    <value>The text to find in value.</value>
  </data>
  <data name="Func_search_Arg_1">
    <value>value</value>
  </data>
  <data name="Func_search_ArgDesc_1">
    <value>The text in which to find search_text.</value>
  </data>
  <data name="Func_search_Arg_2">
    <value>start_index</value>
  </data>
  <data name="Func_search_ArgDesc_2">
    <value>The 1-based index in which to start the search (if omitted, the start_index is 1).</value>
  </data>
  <data name="Func_search_CategoryURL">
    <value>TextAndData</value>
  </data>
  <data name="Func_searchb_Desc">
    <value>Returns the 1-based index of one string within another, searching case insensitively.</value>
  </data>
  <data name="Func_searchb_Category">
    <value>TextAndData</value>
  </data>
  <data name="Func_searchb_Arg_0">
    <value>search_text</value>
  </data>
  <data name="Func_searchb_ArgDesc_0">
    <value>The text to find in value.</value>
  </data>
  <data name="Func_searchb_Arg_1">
    <value>value</value>
  </data>
  <data name="Func_searchb_ArgDesc_1">
    <value>The text in which to find search_text.</value>
  </data>
  <data name="Func_searchb_Arg_2">
    <value>start_index</value>
  </data>
  <data name="Func_searchb_ArgDesc_2">
    <value>The 1-based index in which to start the search (if omitted, the start_index is 1).</value>
  </data>
  <data name="Func_searchb_CategoryURL">
    <value>TextAndData</value>
  </data>
  <data name="Func_counta_Desc">
    <value>Counts the number of references that are not blank.</value>
  </data>
  <data name="Func_counta_Category">
    <value>Statistical</value>
  </data>
  <data name="Func_counta_Arg_0">
    <value>value{0}</value>
  </data>
  <data name="Func_counta_ArgDesc_0">
    <value>A reference or range of references that may contain numbers.</value>
  </data>
  <data name="Func_counta_CategoryURL">
    <value>Statistical</value>
  </data>
  <data name="Func_avedev_Desc">
    <value>Returns the average deviation from the average of all numeric values.</value>
  </data>
  <data name="Func_avedev_Category">
    <value>Statistical</value>
  </data>
  <data name="Func_avedev_Arg_0">
    <value>number{0}</value>
  </data>
  <data name="Func_avedev_ArgDesc_0">
    <value>Number1, number2, ... are one or more numeric values or references to numeric values.</value>
  </data>
  <data name="Func_avedev_CategoryURL">
    <value>Statistical</value>
  </data>
</root>
